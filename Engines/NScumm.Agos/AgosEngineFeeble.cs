//
//  AgosEngineFeeble.cs
//
//  Author:
//       scemino <scemino74@gmail.com>
//
//  Copyright (c) 2016 scemino
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using NScumm.Core;
using NScumm.Core.Graphics;
using NScumm.Core.Input;
using NScumm.Core.IO;
using static NScumm.Core.DebugHelper;

namespace NScumm.Agos
{
    internal class AgosEngineFeeble : AgosEngineSimon2
    {
        private static readonly GameSpecificSettings FeeblefilesSettings = new GameSpecificSettings()
        {
            base_filename = "game22", // base_filename
            restore_filename = "save.999", // restore_filename
            tbl_filename = "tbllist", // tbl_filename
            effects_filename = "", // effects_filename
            speech_filename = "VOICES", // speech_filename
        };

        private static readonly byte[] polish4CD_feeble_windowFont =
        {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
            0x90, 0x90, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x3e, 0x42, 0x82, 0x82, 0x82, 0x86, 0x7a, 0x02, 0x04, 0x04,
            0x08, 0x10, 0x10, 0x7c, 0x82, 0x80, 0x80, 0x80, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x3e, 0x62, 0x92, 0x64, 0x08, 0x10, 0x20, 0x4c, 0x92, 0x8c, 0x00, 0x00, 0x00,
            0x00, 0x70, 0x88, 0x88, 0x50, 0x20, 0x52, 0x8a, 0x84, 0x7a, 0x00, 0x00, 0x00,
            0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x20, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x20, 0x00, 0x00, 0x00,
            0x80, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00,
            0x10, 0x92, 0x54, 0x38, 0x38, 0x54, 0x92, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x10, 0x10, 0x10, 0xfe, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x80, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x80, 0x00, 0x00,
            0x78, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x78, 0x00, 0x00, 0x00,
            0x10, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00, 0x00, 0x00,
            0x78, 0x84, 0x84, 0x04, 0x04, 0x08, 0x10, 0x20, 0x40, 0xfc, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x02, 0x02, 0x1c, 0x02, 0x02, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x04, 0x0c, 0x14, 0x24, 0x44, 0x84, 0xfe, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00,
            0xfe, 0x80, 0x80, 0xfc, 0x02, 0x02, 0x02, 0x02, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x3e, 0x40, 0x80, 0xfc, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0xfe, 0x02, 0x02, 0x02, 0x02, 0x04, 0x08, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00,
            0x78, 0x84, 0x84, 0x84, 0x78, 0x84, 0x84, 0x84, 0x84, 0x78, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x02, 0x02, 0x7c, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x40, 0x80, 0x00,
            0x04, 0x08, 0x08, 0x9c, 0xa2, 0xc2, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x08, 0x10, 0x10, 0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x3c, 0x42, 0x82, 0x02, 0x04, 0x08, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x00,
            0x08, 0x10, 0x10, 0x7c, 0x80, 0x80, 0x78, 0x04, 0x04, 0xf8, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0xfc, 0x82, 0x82, 0x82, 0xfc, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x80, 0x80, 0x80, 0x80, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0xfc, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x00, 0x00, 0x00,
            0xfe, 0x80, 0x80, 0x80, 0x80, 0xfc, 0x80, 0x80, 0x80, 0xfe, 0x00, 0x00, 0x00,
            0xfe, 0x80, 0x80, 0x80, 0x80, 0xfc, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x80, 0x80, 0x86, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x82, 0x82, 0x82, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0xe0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00, 0x00, 0x00,
            0x1e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x82, 0x82, 0x84, 0x88, 0x90, 0xe0, 0x90, 0x88, 0x84, 0x82, 0x00, 0x00, 0x00,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xfe, 0x00, 0x00, 0x00,
            0x82, 0xc6, 0xaa, 0x92, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x82, 0x82, 0xc2, 0xa2, 0x92, 0x8a, 0x86, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0xfc, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x02, 0x02, 0x00,
            0xfc, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x80, 0x80, 0x7c, 0x02, 0x02, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0xfe, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00,
            0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x28, 0x10, 0x00, 0x00, 0x00,
            0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x92, 0xaa, 0xc6, 0x00, 0x00, 0x00,
            0x82, 0x44, 0x28, 0x10, 0x10, 0x10, 0x10, 0x28, 0x44, 0x82, 0x00, 0x00, 0x00,
            0x82, 0x82, 0x82, 0x82, 0x44, 0x28, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00,
            0xfe, 0x02, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0xfe, 0x00, 0x00, 0x00,
            0x00, 0x10, 0x00, 0xfe, 0x04, 0x08, 0x10, 0x20, 0x40, 0xfe, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x7c, 0x82, 0x82, 0xfe, 0x80, 0x80, 0x7e, 0x04, 0x04, 0x08,
            0x08, 0x10, 0x10, 0xfe, 0x04, 0x08, 0x10, 0x20, 0x40, 0xfe, 0x00, 0x00, 0x00,
            0xc0, 0x40, 0x40, 0x60, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
            0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x3e, 0x42, 0x82, 0x82, 0x82, 0x86, 0x7a, 0x00, 0x00, 0x00,
            0x80, 0x80, 0x80, 0xfc, 0x82, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x7c, 0x82, 0x80, 0x80, 0x80, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x02, 0x02, 0x02, 0x7e, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x7c, 0x82, 0x82, 0xfe, 0x80, 0x80, 0x7e, 0x00, 0x00, 0x00,
            0x1c, 0x20, 0x20, 0xf8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x3e, 0x42, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x02, 0x02, 0x7c,
            0x80, 0x80, 0x80, 0xfc, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x40, 0x00, 0x00, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00, 0x00, 0x00,
            0x10, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xe0,
            0x80, 0x80, 0x80, 0x84, 0x88, 0x90, 0xe0, 0x90, 0x88, 0x84, 0x00, 0x00, 0x00,
            0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xfc, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x9c, 0xa2, 0xc2, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xfc, 0x82, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x80, 0x80, 0x80,
            0x00, 0x00, 0x00, 0x7e, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x02, 0x02, 0x02,
            0x00, 0x00, 0x00, 0x9c, 0xa2, 0xc2, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x7c, 0x80, 0x80, 0x78, 0x04, 0x04, 0xf8, 0x00, 0x00, 0x00,
            0x20, 0x20, 0x20, 0xf8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1c, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x82, 0x82, 0x82, 0x82, 0x44, 0x28, 0x10, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x7c, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x82, 0x44, 0x28, 0x10, 0x28, 0x44, 0x82, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x02, 0x02, 0x7c,
            0x00, 0x00, 0x00, 0xfe, 0x04, 0x08, 0x10, 0x20, 0x40, 0xfe, 0x00, 0x00, 0x00,
            0x30, 0x40, 0x40, 0x40, 0x40, 0x80, 0x40, 0x40, 0x40, 0x40, 0x30, 0x00, 0x00,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00,
            0xc0, 0x20, 0x20, 0x20, 0x20, 0x10, 0x20, 0x20, 0x20, 0x20, 0xc0, 0x00, 0x00,
            0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0xc8,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x88, 0x00, 0x11, 0x00, 0x00, 0x00,
            0x03, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0xc8, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x14, 0x00, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x88, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x88, 0x00, 0x11, 0x00, 0x00, 0x00, 0x03,
            0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0xc8, 0x00, 0x03, 0x00,
            0x02, 0x00, 0x0e, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x88, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x03, 0x00, 0x88, 0x00, 0x11, 0x00, 0x00, 0x00, 0x03, 0x00,
            0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0xc8, 0x00, 0x03, 0x00, 0x03,
            0x00, 0x0e, 0x00, 0x7f, 0x00, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x53, 0x00,
            0x53, 0x49, 0x4d, 0x4f, 0x4e, 0x00, 0x00, 0x00, 0xa8, 0x4d, 0xee, 0x00, 0xb0,
            0x4d, 0xee, 0x00, 0x00, 0x53, 0x49, 0x4d, 0x4f, 0x4e, 0x32, 0x00, 0xc0, 0x4d,
            0xee, 0x00, 0xc1, 0x4d, 0xee, 0x00, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x00, 0x00,
            0x00, 0xc0, 0x4d, 0xee, 0x00, 0xd0, 0x4d, 0xee, 0x00, 0x44, 0x72, 0x81, 0x63,
            0x6b, 0x65, 0x6e, 0x20, 0x53, 0x69, 0x65, 0x20, 0x64, 0x69, 0x65, 0x20, 0x3c,
            0x4c, 0x65, 0x65, 0x72, 0x74, 0x61, 0x73, 0x74, 0x65, 0x3e, 0x2c, 0x20, 0x75,
            0x6d, 0x20, 0x66, 0x6f, 0x72, 0x74, 0x7a, 0x75, 0x66, 0x61, 0x68, 0x72, 0x65,
            0x6e, 0x2e, 0x2e, 0x2e, 0x00, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20, 0x3c, 0x53,
            0x50, 0x41, 0x43, 0x45, 0x3e, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x74,
            0x69, 0x6e, 0x75, 0x65, 0x2e, 0x2e, 0x2e, 0x00, 0x65, 0x6e, 0x67, 0x69, 0x6e,
            0x65, 0x73, 0x2f, 0x61, 0x67, 0x6f, 0x73, 0x2f, 0x66, 0x65, 0x65, 0x62, 0x6c,
            0x65, 0x2e, 0x63, 0x70, 0x70, 0x00, 0x5f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x50,
            0x6c, 0x61, 0x79, 0x65, 0x72, 0x00, 0x77, 0x6f, 0x62, 0x62, 0x6c, 0x65, 0x25,
            0x64, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x69,
            0x6e, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x63, 0x6c, 0x69, 0x70, 0x69, 0x6e,
            0x32, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x67, 0x6f, 0x31, 0x2e, 0x73, 0x6d,
            0x6b, 0x00, 0x6d, 0x61, 0x7a, 0x65, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x67,
            0x6f, 0x32, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x69,
            0x6e, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x67, 0x6f, 0x33, 0x2e, 0x73, 0x6d,
            0x6b, 0x00, 0x70, 0x61, 0x64, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x67, 0x6f,
            0x34, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e,
            0x73, 0x6d, 0x6b, 0x00, 0x66, 0x67, 0x6f, 0x35, 0x2e, 0x73, 0x6d, 0x6b, 0x00,
            0x70, 0x69, 0x6c, 0x6c, 0x64, 0x69, 0x65, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66,
            0x67, 0x6f, 0x36, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x62, 0x69, 0x6b, 0x65, 0x62,
            0x75, 0x73, 0x74, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x67, 0x6f, 0x37, 0x2e,
            0x73, 0x6d, 0x6b, 0x00, 0x73, 0x74, 0x61, 0x74, 0x75, 0x65, 0x2e, 0x73, 0x6d,
            0x6b, 0x00, 0x66, 0x67, 0x6f, 0x38, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x6a, 0x75,
            0x6e, 0x6b, 0x6f, 0x75, 0x74, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x67, 0x6f,
            0x39, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x68, 0x79, 0x70, 0x6e, 0x6f, 0x2e,
            0x73, 0x6d, 0x6b, 0x00, 0x66, 0x62, 0x79, 0x65, 0x31, 0x2e, 0x73, 0x6d, 0x6b,
            0x00, 0x66, 0x62, 0x79, 0x65, 0x32, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x6d, 0x6d,
            0x66, 0x61, 0x64, 0x65, 0x69, 0x6e, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x6d, 0x61,
            0x69, 0x6e, 0x6d, 0x65, 0x6e, 0x75, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x66,
            0x61, 0x64, 0x65, 0x35, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x74, 0x65, 0x78,
            0x74, 0x30, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x74, 0x65, 0x78, 0x74, 0x31,
            0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x74, 0x65, 0x78, 0x74, 0x32, 0x2e, 0x73,
            0x6d, 0x6b, 0x00, 0x66, 0x74, 0x65, 0x78, 0x74, 0x33, 0x2e, 0x73, 0x6d, 0x6b,
            0x00, 0x66, 0x74, 0x65, 0x78, 0x74, 0x34, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66,
            0x74, 0x65, 0x78, 0x74, 0x35, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x66, 0x61,
            0x64, 0x65, 0x31, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x6d, 0x75, 0x73, 0x6f, 0x73,
            0x70, 0x31, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x6e, 0x65, 0x77, 0x63, 0x72, 0x65,
            0x64, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x61, 0x73, 0x61, 0x6c, 0x6c, 0x2e,
            0x73, 0x6d, 0x6b, 0x00, 0x6d, 0x75, 0x73, 0x35, 0x70, 0x32, 0x2e, 0x73, 0x6d,
            0x6b, 0x00, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x6f,
            0x75, 0x74, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x66, 0x61,
            0x64, 0x65, 0x33, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x69, 0x64, 0x66, 0x78, 0x34,
            0x61, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x69, 0x64, 0x66, 0x78, 0x34, 0x62, 0x2e,
            0x73, 0x6d, 0x6b, 0x00, 0x69, 0x64, 0x66, 0x78, 0x34, 0x63, 0x2e, 0x73, 0x6d,
            0x6b, 0x00, 0x69, 0x64, 0x66, 0x78, 0x34, 0x64, 0x2e, 0x73, 0x6d, 0x6b, 0x00,
            0x69, 0x64, 0x66, 0x78, 0x34, 0x65, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x69, 0x64,
            0x66, 0x78, 0x34, 0x66, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x69, 0x64, 0x66, 0x78,
            0x34, 0x67, 0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x66, 0x61, 0x64, 0x65, 0x32,
            0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x33, 0x62,
            0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x33, 0x61,
            0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x33, 0x63,
            0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x33, 0x67,
            0x2e, 0x73, 0x6d, 0x6b, 0x00, 0x66, 0x66, 0x61, 0x64, 0x65, 0x34, 0x2e, 0x73,
            0x6d, 0x6b, 0x00, 0x66, 0x66, 0x61, 0x64, 0x65, 0x36, 0x2e, 0x73, 0x6d, 0x6b,
            0x00, 0x77, 0x69, 0x6e, 0x61, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x73, 0x6d, 0x6b,
            0x00, 0x66, 0x62, 0x69, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x2e, 0x73, 0x6d, 0x6b,
            0x00, 0x65, 0x70, 0x69, 0x63, 0x2e, 0x64, 0x78, 0x61, 0x00, 0x00, 0x56, 0x4f,
            0x49, 0x43, 0x45, 0x53, 0x00, 0x00, 0x00, 0xc6, 0x50, 0xee, 0x00, 0xc7, 0x50,
            0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x75, 0x74,
            0x20, 0x6f, 0x66, 0x20, 0x69, 0x63, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x6d, 0x6f,
            0x72, 0x79, 0x00, 0x43, 0x61, 0x6e, 0x27, 0x74, 0x20, 0x6f, 0x70, 0x65, 0x6e,
            0x20, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x27,
            0x25, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x80, 0x00,
            0x88, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xd8,
            0x00, 0x00, 0x04, 0x48, 0x00, 0x00, 0x00, 0x20, 0x89, 0x8e, 0x00, 0xa8, 0x86,
            0x10, 0x04, 0x08, 0x21, 0x88, 0x00, 0x38, 0x50, 0x84, 0x00, 0x89, 0x49, 0x28,
            0x04, 0x08, 0x52, 0x14, 0x00, 0x20, 0x20, 0x84, 0x00, 0x89, 0x48, 0x38, 0x04,
            0x08, 0x53, 0x9c, 0x00, 0x20, 0x50, 0x84, 0x00, 0x89, 0x48, 0x20, 0x04, 0x48,
            0x50, 0x90, 0x00, 0x3c, 0x89, 0xc3, 0x00, 0x88, 0x88, 0x18, 0x03, 0x86, 0x23,
            0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x0b,
            0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0a, 0x0b, 0x0a, 0x0b, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x0a, 0x0b, 0x0a, 0x0d, 0x0a, 0x0b, 0x0a, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x0a, 0x0b, 0x0a, 0x0d, 0x03, 0x0d, 0x0a, 0x0b, 0x0a,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x0b, 0x0a, 0x0d, 0x03, 0x04, 0x03,
            0x0d, 0x0a, 0x0b, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x0b, 0x0a, 0x0d, 0x03,
        };

        private static readonly byte[] polish2CD_feeble_windowFont =
        {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x82, 0x0c, 0x08, 0x00,
            0x00, 0x00, 0x00, 0x3e, 0x42, 0x82, 0x82, 0x82, 0x86, 0x7a, 0x04, 0x06, 0x00,
            0x04, 0x08, 0x10, 0x7c, 0x82, 0x80, 0x80, 0x80, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x3e, 0x62, 0x92, 0x64, 0x08, 0x10, 0x20, 0x4c, 0x92, 0x8c, 0x00, 0x00, 0x00,
            0x7c, 0x8a, 0x92, 0x80, 0x80, 0x80, 0x80, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x20, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x20, 0x00, 0x00, 0x00,
            0x80, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00,
            0xfe, 0x80, 0x80, 0x80, 0x80, 0xfc, 0x80, 0x80, 0x80, 0xfe, 0x18, 0x0c, 0x00,
            0x80, 0x80, 0x90, 0xb0, 0xe0, 0xc0, 0x80, 0x80, 0x80, 0xfe, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x80, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x80, 0x00, 0x00,
            0x78, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x78, 0x00, 0x00, 0x00,
            0x10, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00, 0x00, 0x00,
            0x78, 0x84, 0x84, 0x04, 0x04, 0x08, 0x10, 0x20, 0x40, 0xfc, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x02, 0x02, 0x1c, 0x02, 0x02, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x04, 0x0c, 0x14, 0x24, 0x44, 0x84, 0xfe, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00,
            0xfe, 0x80, 0x80, 0xfc, 0x02, 0x02, 0x02, 0x02, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x3e, 0x40, 0x80, 0xfc, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0xfe, 0x02, 0x02, 0x02, 0x02, 0x04, 0x08, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00,
            0x78, 0x84, 0x84, 0x84, 0x78, 0x84, 0x84, 0x84, 0x84, 0x78, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x02, 0x02, 0x7c, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
            0x8a, 0x92, 0xc2, 0xa2, 0x92, 0x8a, 0x86, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x04, 0x08, 0x10, 0x9c, 0xa2, 0xc2, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x7c, 0x92, 0xa2, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x04, 0x08, 0x10, 0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x3c, 0x42, 0x82, 0x02, 0x04, 0x08, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x00,
            0x04, 0x08, 0x10, 0x7c, 0x80, 0x80, 0x78, 0x04, 0x04, 0xf8, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0xfc, 0x82, 0x82, 0x82, 0xfc, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x80, 0x80, 0x80, 0x80, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0xfc, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x00, 0x00, 0x00,
            0xfe, 0x80, 0x80, 0x80, 0x80, 0xfc, 0x80, 0x80, 0x80, 0xfe, 0x00, 0x00, 0x00,
            0xfe, 0x80, 0x80, 0x80, 0x80, 0xfc, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x80, 0x80, 0x86, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x82, 0x82, 0x82, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0xe0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00, 0x00, 0x00,
            0x1e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x82, 0x82, 0x84, 0x88, 0x90, 0xe0, 0x90, 0x88, 0x84, 0x82, 0x00, 0x00, 0x00,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xfe, 0x00, 0x00, 0x00,
            0x82, 0xc6, 0xaa, 0x92, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x82, 0x82, 0xc2, 0xa2, 0x92, 0x8a, 0x86, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0xfc, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x02, 0x02, 0x00,
            0xfc, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x80, 0x80, 0x7c, 0x02, 0x02, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0xfe, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00,
            0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x28, 0x10, 0x00, 0x00, 0x00,
            0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x92, 0xaa, 0xc6, 0x00, 0x00, 0x00,
            0x82, 0x44, 0x28, 0x10, 0x10, 0x10, 0x10, 0x28, 0x44, 0x82, 0x00, 0x00, 0x00,
            0x82, 0x82, 0x82, 0x82, 0x44, 0x28, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00,
            0xfe, 0x02, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0xfe, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xfe, 0x04, 0x08, 0x7c, 0x20, 0x40, 0xfe, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x7c, 0x82, 0x82, 0xfe, 0x80, 0x80, 0x7e, 0x18, 0x0c, 0x00,
            0x04, 0x08, 0x10, 0xfe, 0x04, 0x08, 0x10, 0x20, 0x40, 0xfe, 0x00, 0x00, 0x00,
            0xc0, 0x40, 0x40, 0x60, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00,
            0x7c, 0x8a, 0x90, 0x80, 0x7c, 0x02, 0x02, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x18, 0xfe, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0xfe, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x3e, 0x42, 0x82, 0x82, 0x82, 0x86, 0x7a, 0x00, 0x00, 0x00,
            0x80, 0x80, 0x80, 0xfc, 0x82, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x7c, 0x82, 0x80, 0x80, 0x80, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x02, 0x02, 0x02, 0x7e, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x7c, 0x82, 0x82, 0xfe, 0x80, 0x80, 0x7e, 0x00, 0x00, 0x00,
            0x1c, 0x20, 0x20, 0xf8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x3e, 0x42, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x02, 0x02, 0x7c,
            0x80, 0x80, 0x80, 0xfc, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x40, 0x00, 0x00, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00, 0x00, 0x00,
            0x10, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xe0,
            0x80, 0x80, 0x80, 0x84, 0x88, 0x90, 0xe0, 0x90, 0x88, 0x84, 0x00, 0x00, 0x00,
            0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xfc, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x9c, 0xa2, 0xc2, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xfc, 0x82, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x80, 0x80, 0x80,
            0x00, 0x00, 0x00, 0x7e, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x02, 0x02, 0x02,
            0x00, 0x00, 0x00, 0x9c, 0xa2, 0xc2, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x7c, 0x80, 0x80, 0x78, 0x04, 0x04, 0xf8, 0x00, 0x00, 0x00,
            0x20, 0x20, 0x20, 0xf8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1c, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x82, 0x82, 0x82, 0x82, 0x44, 0x28, 0x10, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x7c, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x82, 0x44, 0x28, 0x10, 0x28, 0x44, 0x82, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x02, 0x02, 0x7c,
            0x00, 0x00, 0x00, 0xfe, 0x04, 0x08, 0x10, 0x20, 0x40, 0xfe, 0x00, 0x00, 0x00,
            0x30, 0x40, 0x40, 0x40, 0x40, 0x80, 0x40, 0x40, 0x40, 0x40, 0x30, 0x00, 0x00,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00,
            0xc0, 0x20, 0x20, 0x20, 0x20, 0x10, 0x20, 0x20, 0x20, 0x20, 0xc0, 0x00, 0x00,
            0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x80, 0x80, 0x80, 0x80, 0x82, 0x82, 0x7c, 0x10, 0x10, 0x30,
            0x00, 0x28, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x00, 0x00, 0x00,
            0x10, 0x20, 0x00, 0x7c, 0x82, 0x82, 0xfe, 0x80, 0x80, 0x7e, 0x00, 0x00, 0x00,
            0x10, 0x28, 0x00, 0x3e, 0x42, 0x82, 0x82, 0x82, 0x86, 0x7a, 0x00, 0x00, 0x00,
            0x00, 0x28, 0x00, 0x3e, 0x42, 0x82, 0x82, 0x82, 0x86, 0x7a, 0x00, 0x00, 0x00,
            0x10, 0x08, 0x00, 0x3e, 0x42, 0x82, 0x82, 0x82, 0x86, 0x7a, 0x00, 0x00, 0x00,
            0x08, 0x14, 0x08, 0x3e, 0x42, 0x82, 0x82, 0x82, 0x86, 0x7a, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x7c, 0x82, 0x80, 0x80, 0x80, 0x82, 0x7c, 0x10, 0x10, 0x30,
            0x10, 0x28, 0x00, 0x7c, 0x82, 0x82, 0xfe, 0x80, 0x80, 0x7e, 0x00, 0x00, 0x00,
            0x00, 0x28, 0x00, 0x7c, 0x82, 0x82, 0xfe, 0x80, 0x80, 0x7e, 0x00, 0x00, 0x00,
            0x10, 0x08, 0x00, 0x7c, 0x82, 0x82, 0xfe, 0x80, 0x80, 0x7e, 0x00, 0x00, 0x00,
            0x00, 0xa0, 0x00, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00, 0x00, 0x00,
            0x40, 0xa0, 0x00, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00, 0x00, 0x00,
            0x80, 0x40, 0x00, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00, 0x00, 0x00,
            0x28, 0x00, 0x7c, 0x82, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x10, 0x28, 0x7c, 0x82, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x10, 0x20, 0xfe, 0x80, 0x80, 0xfc, 0x80, 0x80, 0x80, 0xfe, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x10, 0x28, 0x00, 0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x00, 0x28, 0x00, 0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x20, 0x10, 0x00, 0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x10, 0x28, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x00, 0x00, 0x00,
            0x10, 0x08, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x00, 0x00, 0x00,
            0x00, 0x28, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x02, 0x02, 0x7c,
            0x28, 0x00, 0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x28, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x08, 0x10, 0x00, 0x3e, 0x42, 0x82, 0x82, 0x82, 0x86, 0x7a, 0x00, 0x00, 0x00,
            0x40, 0x80, 0x00, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00, 0x00, 0x00,
            0x10, 0x20, 0x00, 0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x08, 0x10, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x00, 0x00, 0x00,
            0x14, 0x28, 0x00, 0x9c, 0xa2, 0xc2, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x14, 0x28, 0x82, 0xc2, 0xa2, 0x92, 0x8a, 0x86, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x10, 0x10, 0x00, 0x10, 0x10, 0x20, 0x40, 0x80, 0x82, 0x84, 0x78, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x3c, 0x42, 0x82, 0x82, 0x82, 0x84, 0x84, 0x82, 0x82, 0x82, 0x9c, 0x80, 0x80,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        };

        private static readonly byte[] feeble_windowFont =
        {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
            0x90, 0x90, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x48, 0xfc, 0x48, 0x48, 0xfc, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x7c, 0x92, 0x90, 0x90, 0x7c, 0x12, 0x12, 0x12, 0x92, 0x7c, 0x10, 0x10, 0x00,
            0x3e, 0x62, 0x92, 0x64, 0x08, 0x10, 0x20, 0x4c, 0x92, 0x8c, 0x00, 0x00, 0x00,
            0x00, 0x70, 0x88, 0x88, 0x50, 0x20, 0x52, 0x8a, 0x84, 0x7a, 0x00, 0x00, 0x00,
            0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x20, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x20, 0x00, 0x00, 0x00,
            0x80, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00,
            0x10, 0x92, 0x54, 0x38, 0x38, 0x54, 0x92, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x10, 0x10, 0x10, 0xfe, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x80, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x80, 0x00, 0x00,
            0x78, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84, 0x78, 0x00, 0x00, 0x00,
            0x10, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00, 0x00, 0x00,
            0x78, 0x84, 0x84, 0x04, 0x04, 0x08, 0x10, 0x20, 0x40, 0xfc, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x02, 0x02, 0x1c, 0x02, 0x02, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x04, 0x0c, 0x14, 0x24, 0x44, 0x84, 0xfe, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00,
            0xfe, 0x80, 0x80, 0xfc, 0x02, 0x02, 0x02, 0x02, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x3e, 0x40, 0x80, 0xfc, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0xfe, 0x02, 0x02, 0x02, 0x02, 0x04, 0x08, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00,
            0x78, 0x84, 0x84, 0x84, 0x78, 0x84, 0x84, 0x84, 0x84, 0x78, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x02, 0x02, 0x7c, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x40, 0x80, 0x00,
            0x00, 0x00, 0x10, 0x20, 0x40, 0x80, 0x40, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00,
            0x3c, 0x42, 0x82, 0x02, 0x04, 0x08, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x00,
            0x3c, 0x42, 0x82, 0x9a, 0xa6, 0xa6, 0x9c, 0x80, 0x80, 0x7e, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0xfc, 0x82, 0x82, 0x82, 0xfc, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x80, 0x80, 0x80, 0x80, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0xfc, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x00, 0x00, 0x00,
            0xfe, 0x80, 0x80, 0x80, 0x80, 0xfc, 0x80, 0x80, 0x80, 0xfe, 0x00, 0x00, 0x00,
            0xfe, 0x80, 0x80, 0x80, 0x80, 0xfc, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x80, 0x80, 0x86, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x82, 0x82, 0x82, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0xe0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00, 0x00, 0x00,
            0x1e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x82, 0x82, 0x84, 0x88, 0x90, 0xe0, 0x90, 0x88, 0x84, 0x82, 0x00, 0x00, 0x00,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xfe, 0x00, 0x00, 0x00,
            0x82, 0xc6, 0xaa, 0x92, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x82, 0x82, 0xc2, 0xa2, 0x92, 0x8a, 0x86, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0xfc, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x02, 0x02, 0x00,
            0xfc, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x7c, 0x82, 0x80, 0x80, 0x7c, 0x02, 0x02, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0xfe, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00,
            0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x28, 0x10, 0x00, 0x00, 0x00,
            0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x92, 0xaa, 0xc6, 0x00, 0x00, 0x00,
            0x82, 0x44, 0x28, 0x10, 0x10, 0x10, 0x10, 0x28, 0x44, 0x82, 0x00, 0x00, 0x00,
            0x82, 0x82, 0x82, 0x82, 0x44, 0x28, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00,
            0xfe, 0x02, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0xfe, 0x00, 0x00, 0x00,
            0xe0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xe0, 0x00, 0x00, 0x00,
            0x80, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,
            0xe0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xe0, 0x00, 0x00, 0x00,
            0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
            0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x3e, 0x42, 0x82, 0x82, 0x82, 0x86, 0x7a, 0x00, 0x00, 0x00,
            0x80, 0x80, 0x80, 0xfc, 0x82, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x7c, 0x82, 0x80, 0x80, 0x80, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x02, 0x02, 0x02, 0x7e, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x7c, 0x82, 0x82, 0xfe, 0x80, 0x80, 0x7e, 0x00, 0x00, 0x00,
            0x1c, 0x20, 0x20, 0xf8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x3e, 0x42, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x02, 0x02, 0x7c,
            0x80, 0x80, 0x80, 0xfc, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x40, 0x00, 0x00, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00, 0x00, 0x00,
            0x10, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xe0,
            0x80, 0x80, 0x80, 0x84, 0x88, 0x90, 0xe0, 0x90, 0x88, 0x84, 0x00, 0x00, 0x00,
            0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xfc, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x9c, 0xa2, 0xc2, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xfc, 0x82, 0x82, 0x82, 0x82, 0x82, 0xfc, 0x80, 0x80, 0x80,
            0x00, 0x00, 0x00, 0x7e, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x02, 0x02, 0x02,
            0x00, 0x00, 0x00, 0x9c, 0xa2, 0xc2, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x7c, 0x80, 0x80, 0x78, 0x04, 0x04, 0xf8, 0x00, 0x00, 0x00,
            0x20, 0x20, 0x20, 0xf8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x1c, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x82, 0x82, 0x82, 0x82, 0x44, 0x28, 0x10, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x7c, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x82, 0x44, 0x28, 0x10, 0x28, 0x44, 0x82, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x02, 0x02, 0x7c,
            0x00, 0x00, 0x00, 0xfe, 0x04, 0x08, 0x10, 0x20, 0x40, 0xfe, 0x00, 0x00, 0x00,
            0x30, 0x40, 0x40, 0x40, 0x40, 0x80, 0x40, 0x40, 0x40, 0x40, 0x30, 0x00, 0x00,
            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00,
            0xc0, 0x20, 0x20, 0x20, 0x20, 0x10, 0x20, 0x20, 0x20, 0x20, 0xc0, 0x00, 0x00,
            0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00,
            0x7c, 0x82, 0x82, 0x80, 0x80, 0x80, 0x80, 0x82, 0x82, 0x7c, 0x10, 0x10, 0x30,
            0x00, 0x28, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x00, 0x00, 0x00,
            0x10, 0x20, 0x00, 0x7c, 0x82, 0x82, 0xfe, 0x80, 0x80, 0x7e, 0x00, 0x00, 0x00,
            0x10, 0x28, 0x00, 0x3e, 0x42, 0x82, 0x82, 0x82, 0x86, 0x7a, 0x00, 0x00, 0x00,
            0x00, 0x28, 0x00, 0x3e, 0x42, 0x82, 0x82, 0x82, 0x86, 0x7a, 0x00, 0x00, 0x00,
            0x10, 0x08, 0x00, 0x3e, 0x42, 0x82, 0x82, 0x82, 0x86, 0x7a, 0x00, 0x00, 0x00,
            0x08, 0x14, 0x08, 0x3e, 0x42, 0x82, 0x82, 0x82, 0x86, 0x7a, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x7c, 0x82, 0x80, 0x80, 0x80, 0x82, 0x7c, 0x10, 0x10, 0x30,
            0x10, 0x28, 0x00, 0x7c, 0x82, 0x82, 0xfe, 0x80, 0x80, 0x7e, 0x00, 0x00, 0x00,
            0x00, 0x28, 0x00, 0x7c, 0x82, 0x82, 0xfe, 0x80, 0x80, 0x7e, 0x00, 0x00, 0x00,
            0x10, 0x08, 0x00, 0x7c, 0x82, 0x82, 0xfe, 0x80, 0x80, 0x7e, 0x00, 0x00, 0x00,
            0x00, 0xa0, 0x00, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00, 0x00, 0x00,
            0x40, 0xa0, 0x00, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00, 0x00, 0x00,
            0x80, 0x40, 0x00, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00, 0x00, 0x00,
            0x28, 0x00, 0x7c, 0x82, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x10, 0x28, 0x7c, 0x82, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x28, 0x00, 0xfe, 0x80, 0x80, 0xfc, 0x80, 0x80, 0x80, 0xfe, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x10, 0x28, 0x00, 0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x00, 0x28, 0x00, 0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x20, 0x10, 0x00, 0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x10, 0x28, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x00, 0x00, 0x00,
            0x10, 0x08, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x00, 0x00, 0x00,
            0x00, 0x28, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x02, 0x02, 0x7c,
            0x28, 0x00, 0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x28, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x08, 0x10, 0x00, 0x3e, 0x42, 0x82, 0x82, 0x82, 0x86, 0x7a, 0x00, 0x00, 0x00,
            0x40, 0x80, 0x00, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xe0, 0x00, 0x00, 0x00,
            0x10, 0x20, 0x00, 0x7c, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x00, 0x00, 0x00,
            0x08, 0x10, 0x00, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x7e, 0x00, 0x00, 0x00,
            0x14, 0x28, 0x00, 0x9c, 0xa2, 0xc2, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x14, 0x28, 0x82, 0xc2, 0xa2, 0x92, 0x8a, 0x86, 0x82, 0x82, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x10, 0x10, 0x00, 0x10, 0x10, 0x20, 0x40, 0x80, 0x82, 0x84, 0x78, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x3c, 0x42, 0x82, 0x82, 0x82, 0x84, 0x84, 0x82, 0x82, 0x82, 0x9c, 0x80, 0x80,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        };

        protected IMoviePlayer _moviePlayer;
        public VideoFlags _interactiveVideo;
        private Dictionary<int, Action> _opcodes;
        private readonly byte[] _pathValues = new byte[400];
        private readonly byte[] _pathValues1 = new byte[400];
        private ushort _PVCount;
        private ushort _GPVCount;
        private ushort _PVCount1;
        private ushort _GPVCount1;
        private readonly ushort[] _bitArrayThree = new ushort[16];
        private short _baseY;
        private float _scale;
        private ushort _vgaCurSpritePriority;
        private bool _iOverflow;
        private Rect _feebleRect;
        private short _scaleX, _scaleY, _scaleWidth, _scaleHeight;

        public AgosEngineFeeble(ISystem system, GameSettings settings, AgosGameDescription gd)
            : base(system, settings, gd)
        {
        }

        protected override void SetupGame()
        {
            gss = FeeblefilesSettings;
            _numVideoOpcodes = 85;
            _vgaMemSize = 7500000;
            _itemMemSize = 20000;
            _tableMemSize = 200000;
            _frameCount = 1;
            _vgaBaseDelay = 5;
            _vgaPeriod = 50;
            _numBitArray1 = 16;
            _numBitArray2 = 16;
            _numBitArray3 = 16;
            _numItemStore = 10;
            _numTextBoxes = 40;
            _numVars = 255;

            _numSpeech = 10000;
            _numZone = 450;

            SetupGameCore();
        }

        protected override void SetupVideoOpcodes(Action[] op)
        {
            base.SetupVideoOpcodes(op);

            op[75] = vc75_setScale;
            op[76] = vc76_setScaleXOffs;
            op[77] = vc77_setScaleYOffs;
            op[78] = vc78_computeXY;
            op[79] = vc79_computePosNum;
            op[80] = vc80_setOverlayImage;
            op[81] = vc81_setRandom;
            op[82] = vc82_getPathValue;
            op[83] = vc83_playSoundLoop;
            op[84] = vc84_stopSoundLoop;
        }

        protected override ushort ReadUint16Wrapper(BytePtr src)
        {
            return src.ToUInt16();
        }

        protected override uint ReadUint32Wrapper(BytePtr src)
        {
            return src.ToUInt32();
        }

        protected override ushort To16Wrapper(uint value)
        {
            return (ushort) value;
        }

        protected override string GenSaveName(int slot)
        {
            return $"feeble.{slot:D3}";
        }

        protected override void InitMouse()
        {
            _maxCursorWidth = 40;
            _maxCursorHeight = 40;
            _mouseData = new byte[_maxCursorWidth * _maxCursorHeight];
        }

        protected override void vc36_setWindowImage()
        {
            _displayFlag = 0;
            VcReadNextWord();
            VcReadNextWord();
            FillBackGroundFromFront();
        }

        protected override int SetupIconHitArea(WindowBlock window, uint num, int x, int y, Item itemPtr)
        {
            var h = FindEmptyHitArea();
            HitArea ha = h.Value;

            ha.x = (ushort) x;
            ha.y = (ushort) y;
            ha.itemPtr = itemPtr;
            ha.width = 45;
            ha.height = 44;
            ha.flags = BoxFlags.kBFBoxInUse | BoxFlags.kBFBoxItem;
            ha.id = (ushort) num;
            ha.priority = 100;
            ha.verb = 208;

            return h.Offset;
        }

        protected override void WindowDrawChar(WindowBlock window, int x, int y, byte chr)
        {
            BytePtr src;
            byte color;

            if (_noOracleScroll != 0)
                return;

            _videoLockOut |= 0x8000;

            var dst = BackGround;
            var dstPitch = _backGroundBuf.Pitch;
            var h = 13;
            var w = GetFeebleFontSize(chr);

            if (_language == Language.PL_POL)
            {
                if (GetExtra() == "4CD")
                    src = new BytePtr(polish4CD_feeble_windowFont, (chr - 32) * 13);
                else
                    src = new BytePtr(polish2CD_feeble_windowFont, (chr - 32) * 13);
            }
            else
            {
                src = new BytePtr(feeble_windowFont, (chr - 32) * 13);
            }
            dst += y * dstPitch + x + window.textColumnOffset;

            color = window.textColor;

            do
            {
                sbyte b = (sbyte) src.Value;
                src.Offset++;
                var i = 0;
                do
                {
                    if (b < 0)
                    {
                        if (dst[i] == 0)
                            dst[i] = color;
                    }

                    b <<= 1;
                } while (++i != w);
                dst += dstPitch;
            } while (--h != 0);

            _videoLockOut = (ushort) (_videoLockOut & ~0x8000);
        }

        protected override void DoOutput(BytePtr src, int len)
        {
            if (_textWindow == null)
                return;

            while (len-- != 0 && !HasToQuit)
            {
                if (GetBitFlag(93))
                {
                    if (_curWindow == 3)
                    {
                        if ((_newLines >= _textWindow.scrollY) && (_newLines < (_textWindow.scrollY + 3)))
                            SendWindow(src.Value);
                        if (src.Value == '\n') // Do two top lines of text only
                            _newLines++;
                        src.Offset++;
                    }
                }
                else
                {
                    if (GetBitFlag(94))
                    {
                        if (_curWindow == 3)
                        {
                            if (_newLines == (_textWindow.scrollY + 7))
                                SendWindow(src.Value);
                            if (src.Value == '\n') // Do two top lines of text only
                                _newLines++;
                            src.Offset++;
                        }
                    }
                    else
                    {
                        if (GetBitFlag(92))
                            Delay(50);
                        SendWindow(src.Value);
                        src.Offset++;
                    }
                }
            }
        }

        protected override void WindowNewLine(WindowBlock window)
        {
            if (_noOracleScroll == 0)
            {
                if (window.height < window.textRow + 30)
                {
                    if (!GetBitFlag(94))
                    {
                        _noOracleScroll = 1;
                        if (GetBitFlag(92))
                        {
                            _noOracleScroll = 0;
                            CheckLinkBox();
                            ScrollOracle();
                            LinksUp();
                            window.scrollY++;
                            _oracleMaxScrollY++;
                        }
                        else
                        {
                            _oracleMaxScrollY++;
                            CheckLinkBox();
                        }
                    }
                }
                else
                {
                    window.textRow += 15;
                    CheckLinkBox();
                }
            }
            else
            {
                _oracleMaxScrollY++;
                CheckLinkBox();
            }

            window.textColumn = 0;
            window.textColumnOffset = 0;
            window.textLength = 0;
        }

        protected override void DrawMousePointer()
        {
            if (_animatePointer)
            {
                if (GetBitFlag(99))
                {
                    _mouseToggle = !_mouseToggle;
                    if (_mouseToggle)
                        _mouseAnim++;
                }
                else
                {
                    _mouseAnim++;
                }
                if (_mouseAnim == _mouseAnimMax)
                    _mouseAnim = 1;
            }

            int cursor = _mouseCursor;

            if (!_animatePointer && GetBitFlag(99))
            {
                _mouseAnim = 1;
                cursor = 6;
            }
            else if (_mouseCursor != 5 && GetBitFlag(72))
            {
                cursor += 7;
            }

            if (cursor != _currentMouseCursor || _mouseAnim != _currentMouseAnim)
            {
                _currentMouseCursor = (byte) cursor;
                _currentMouseAnim = _mouseAnim;

                Array.Clear(_mouseData.Data, _mouseData.Offset, _maxCursorWidth * _maxCursorHeight);

                var image = cursor * 16 + 1;
                var offs = cursor * 32;
                DrawMousePart(image, _mouseOffs[offs], _mouseOffs[offs + 1]);

                image = cursor * 16 + 1 + _mouseAnim;
                offs = cursor * 32 + _mouseAnim * 2;
                DrawMousePart(image, _mouseOffs[offs], _mouseOffs[offs + 1]);

                int hotspotX = 19;
                int hotspotY = 19;

                if (_mouseCursor == 14)
                {
                    // Finger pointing away from screen. Not sure where
                    // this is used.
                    hotspotX += 4;
                    hotspotY -= 6;
                }
                else if (_mouseCursor == 15)
                {
                    // Finger pointing down. Used for the oh-so-annoying
                    // Cygnus Alpha tile puzzle.
                    hotspotY += 18;
                }

                OSystem.GraphicsManager.SetCursor(_mouseData, _maxCursorWidth, _maxCursorHeight,
                    new Point((short) hotspotX, (short) hotspotY), 0);
            }
        }

        private void DrawMousePart(int image, byte x, byte y)
        {
            VgaPointersEntry vpe = _vgaBufferPointers[7];

            BytePtr dst = _mouseData + y * _maxCursorWidth + x;
            BytePtr src = vpe.vgaFile2 + image * 8;
            int width = src.ToUInt16(6);
            int height = src.ToUInt16(4);

            src = vpe.vgaFile2 + src.ToInt32();

            System.Diagnostics.Debug.Assert(width + x <= _maxCursorWidth);
            System.Diagnostics.Debug.Assert(height + y <= _maxCursorWidth);

            for (int h = 0; h < height; h++)
            {
                for (int w = 0; w < width; w++)
                {
                    if (src[w] != 0)
                        dst[w] = src[w];
                }
                src += width;
                dst += _maxCursorWidth;
            }
        }

        private void CheckLinkBox()
        {
            // Check for boxes spilling over to next row of text
            if (_hyperLink != 0)
            {
                _variableArray[52] = (short) (_textWindow.x + _textWindow.textColumn - _variableArray[50]);
                if (_variableArray[52] != 0)
                {
                    DefineBox(_variableArray[53], _variableArray[50], _variableArray[51], _variableArray[52], 15, 145,
                        208, DummyItem2);
                    _variableArray[53]++;
                }
                _variableArray[50] = _textWindow.x;
                _variableArray[51] = (short) (_textWindow.textRow + _textWindow.y +
                                              (_oracleMaxScrollY - _textWindow.scrollY) * 15);
            }
        }

        private void ScrollOracle()
        {
            for (var i = 0; i < 5; i++)
                ScrollOracleUp();
        }

        protected override void DrawIconArray(int num, Item itemRef, int line, int classMask)
        {
            Item item_ptr_org = itemRef;
            ushort flagnumber = 201;
            ushort iconperline = 458;
            ushort iconsdown = 384;
            ushort idone = 0;
            ushort icount = 0;
            ushort xp = 188, yp = 306;
            int k;
            _iOverflow = false;

            line = _variableArray[30];
            if (line == 0)
                _variableArray[31] = 0;

            var window = _windowArray[num & 7];
            if (window == null)
                return;

            for (k = flagnumber; k <= flagnumber + 18; k++)
                _variableArray[k] = 0;

            if (window.iconPtr != null)
                RemoveIconArray(num);

            window.iconPtr = new IconBlock();
            window.iconPtr.itemRef = itemRef;
            window.iconPtr.upArrow = -1;
            window.iconPtr.downArrow = -1;
            window.iconPtr.line = (short) line;
            window.iconPtr.classMask = (ushort) classMask;

            itemRef = DerefItem(itemRef.child);
            k = flagnumber;

            while (itemRef != null && line > 65)
            {
                ushort ct = xp;
                while (itemRef != null && ct < iconperline)
                {
                    if ((classMask == 0) || ((itemRef.classFlags & classMask) != 0))
                    {
                        if (HasIcon(itemRef))
                        {
                            ct += 45;
                            k++;
                        }
                    }
                    itemRef = DerefItem(itemRef.next);
                }
                line -= 52;
                if (k == (flagnumber + 18))
                    k = flagnumber;
            }
            yp -= (ushort) line; // Adjust starting y

            if (itemRef == null)
            {
                window.iconPtr.line = 0;
                itemRef = DerefItem(item_ptr_org.child);
            }

            while (itemRef != null)
            {
                if ((classMask != 0) && ((itemRef.classFlags & classMask) == 0))
                    goto l1;
                if (!HasIcon(itemRef))
                    goto l1;
                if (idone == 0)
                {
                    ///
                    ///	Create thee icon and graphics rendering
                    //
                    window.iconPtr.iconArray[icount].item = itemRef;
                    _variableArray[k] = (short) ItemGetIconNumber(itemRef);
                    window.iconPtr.iconArray[icount++].boxCode =
                        (ushort) SetupIconHitArea(window, (uint) k++, xp, yp, itemRef);
                }
                else
                {
                    ///
                    ///	Just remember the overflow has occurred
                    //
                    window.iconPtr.iconArray[icount].item = null; /* END MARKINGS */
                    _iOverflow = true;
                }
                xp += 45;
                if (xp >= iconperline)
                {
                    // End of line ?
                    if (k == flagnumber + 18)
                        k = flagnumber;
                    xp = 188;
                    yp += 52; // Move down
                    if (yp >= iconsdown)
                    {
                        // Full ?
                        idone = 1; // Note completed screen
                    }
                }
                l1:
                ;
                itemRef = DerefItem(itemRef.next);
            }
            window.iconPtr.iconArray[icount].item = null; // END MARKINGS
            if (_variableArray[30] == 0)
            {
                if (yp != 306)
                    _variableArray[31] = 52;
                if ((xp == 188) && (yp == 358))
                    _variableArray[31] = 0;
            }

            // Plot arrows and add their boxes
            AddArrows(window, (byte) num);
            window.iconPtr.upArrow = (short) _scrollUpHitArea;
            window.iconPtr.downArrow = (short) _scrollDownHitArea;
        }

        protected override void vc48_setPathFinder()
        {
            ushort a = (ushort) _variableArrayPtr[12];
            var p = _pathFindArray[a - 1];

            VgaSprite vsp = FindCurSprite().Value;
            short x, y;
            short x1, y1, x2, y2;
            uint pos = 0;

            x = vsp.x;
            while (x >= (short) ReadUint16Wrapper(p + 2))
            {
                p += 2;
                pos++;
            }

            x1 = (short) ReadUint16Wrapper(p);
            y1 = (short) ReadUint16Wrapper(p + 2);
            x2 = (short) ReadUint16Wrapper(p + 4);
            y2 = (short) ReadUint16Wrapper(p + 6);

            if (x2 != 9999)
            {
                short ydiff = (short) (y2 - y1);
                if (ydiff < 0)
                {
                    ydiff = (short) -ydiff;
                    x = (short) (vsp.x & 7);
                    ydiff *= x;
                    ydiff /= 8;
                    ydiff = (short) -ydiff;
                }
                else
                {
                    x = (short) (vsp.x & 7);
                    ydiff *= x;
                    ydiff /= 8;
                }
                y1 += ydiff;
            }

            y = vsp.y;
            vsp.y = y1;
            CheckScrollY((short) (y1 - y), y1);

            _variableArrayPtr[11] = x1;
            _variableArrayPtr[13] = (short) pos;
        }

        private void FillBackGroundFromFront()
        {
            LockScreen(screen =>
            {
                BytePtr src = screen.Pixels;
                BytePtr dst = BackGround;

                for (int i = 0; i < _screenHeight; i++)
                {
                    src.Copy(dst, _screenWidth);
                    src += screen.Pitch;
                    dst += _backGroundBuf.Pitch;
                }
            });
        }

        private void vc75_setScale()
        {
            _baseY = (short) VcReadNextWord();
            _scale = VcReadNextWord() / 1000000.0f;
        }

        private void vc76_setScaleXOffs()
        {
            if (GameType == SIMONGameType.GType_PP && GetBitFlag(120))
            {
                ushort old_file_1, tmp1, tmp2;

                old_file_1 = _vgaCurSpriteId;

                _vgaCurSpriteId = (ushort) VcReadVar((int) VcReadNextWord());
                var vsp1 = FindCurSprite().Value;
                _vgaCurSpriteId = (ushort) VcReadVar((int) VcReadNextWord());
                var vsp2 = FindCurSprite().Value;

                tmp1 = (ushort) vsp1.x;
                tmp2 = (ushort) vsp2.x;
                vsp1.x = (short) tmp2;
                vsp2.x = (short) tmp1;
                tmp1 = (ushort) vsp1.y;
                tmp2 = (ushort) vsp2.y;
                vsp1.y = (short) tmp2;
                vsp2.y = (short) tmp1;

                _vgaCurSpriteId = old_file_1;
                _vcPtr += 2;
            }
            else
            {
                VgaSprite vsp = FindCurSprite().Value;

                vsp.image = (short) VcReadNextWord();
                short x = (short) VcReadNextWord();
                ushort var = (ushort) VcReadNextWord();

                vsp.x += (short) GetScale(vsp.y, x);
                _variableArrayPtr[var] = vsp.x;

                CheckScrollX(x, vsp.x);

                vsp.flags = DrawFlags.kDFScaled;
            }
        }

        private void vc77_setScaleYOffs()
        {
            VgaSprite vsp = FindCurSprite().Value;

            vsp.image = (short) VcReadNextWord();
            short y = (short) VcReadNextWord();
            ushort var = (ushort) VcReadNextWord();

            vsp.y += (short) GetScale(vsp.y, y);
            _variableArrayPtr[var] = vsp.y;

            if (y != 0)
                CheckScrollY(y, vsp.y);

            vsp.flags = DrawFlags.kDFScaled;
        }

        // Scrolling functions for Feeble Files
        private void CheckScrollX(short x, short xpos)
        {
            if (_scrollXMax == 0 || x == 0)
                return;

            if (GameType == SIMONGameType.GType_FF && (GetBitFlag(80) || GetBitFlag(82)))
                return;

            short tmp;
            if (x > 0)
            {
                if (_scrollCount != 0)
                {
                    if (_scrollCount >= 0)
                        return;
                    _scrollCount = 0;
                }
                else
                {
                    if (_scrollFlag != 0)
                        return;
                }

                if (xpos - _scrollX >= 480)
                {
                    _scrollCount = 320;
                    tmp = (short) (_scrollXMax - _scrollX);
                    if (tmp < 320)
                        _scrollCount = tmp;
                }
            }
            else
            {
                if (_scrollCount != 0)
                {
                    if (_scrollCount < 0)
                        return;
                    _scrollCount = 0;
                }
                else
                {
                    if (_scrollFlag != 0)
                        return;
                }

                if (xpos - _scrollX < 161)
                {
                    _scrollCount = -320;
                    if (_scrollX < 320)
                        _scrollCount = (short) -_scrollX;
                }
            }
        }


        void CheckScrollY(short y, short ypos)
        {
            if (_scrollYMax == 0)
                return;

            if (GameType == SIMONGameType.GType_FF && GetBitFlag(80))
                return;

            short tmp;
            if (y >= 0)
            {
                if (_scrollCount != 0)
                {
                    if (_scrollCount >= 0)
                        return;
                }
                else
                {
                    if (_scrollFlag != 0)
                        return;
                }

                if (ypos - _scrollY >= 440)
                {
                    _scrollCount = 240;
                    tmp = (short) (_scrollYMax - _scrollY);
                    if (tmp < 240)
                        _scrollCount = tmp;
                }
            }
            else
            {
                if (_scrollCount != 0)
                {
                    if (_scrollCount < 0)
                        return;
                }
                else
                {
                    if (_scrollFlag != 0)
                        return;
                }

                if (ypos - _scrollY < 100)
                {
                    _scrollCount = -240;
                    if (_scrollY < 240)
                        _scrollCount = (short) -_scrollY;
                }
            }
        }

        private int GetScale(short y, short x)
        {
            short z;

            if (y > _baseY)
            {
                return (short) (x * (1 + ((y - _baseY) * _scale)));
            }
            if (x == 0)
                return(0);
            if (x < 0)
            {
                z = ((short) ((x * (1 - ((_baseY - y) * _scale))) - 0.5));
                if (z > -2)
                    return(-2);
                return(z);
            }

            z = ((short) ((x * (1 - ((_baseY - y) * _scale))) + 0.5));
            if (z < 2)
                return(2);

            return(z);
        }

        private void vc78_computeXY()
        {
            VgaSprite vsp = FindCurSprite().Value;

            ushort a = (ushort) _variableArrayPtr[12];
            ushort b = (ushort) _variableArrayPtr[13];

            var p = _pathFindArray[a - 1];
            p += (b * 2) * 2;

            ushort posx = ReadUint16Wrapper(p);
            _variableArrayPtr[15] = (short) posx;
            vsp.x = (short) posx;

            ushort posy = ReadUint16Wrapper(p + 2);
            _variableArrayPtr[16] = (short) posy;
            vsp.y = (short) posy;

            if (GameType == SIMONGameType.GType_FF)
            {
                SetBitFlag(85, false);
                if (GetBitFlag(74))
                {
                    CenterScroll();
                }
            }
        }

        private void vc79_computePosNum()
        {
            uint a = (ushort) _variableArrayPtr[12];
            var p = _pathFindArray[a - 1];
            uint pos = 0;

            short y = _variableArrayPtr[16];
            while (y >= (short) ReadUint16Wrapper(p + 2))
            {
                p += 2 * 2;
                pos++;
            }

            _variableArrayPtr[13] = (short) pos;
        }

        private void vc80_setOverlayImage()
        {
            VgaSprite vsp = FindCurSprite().Value;

            vsp.image = (short) VcReadVarOrWord();

            vsp.x += (short) VcReadNextWord();
            vsp.y += (short) VcReadNextWord();
            vsp.flags = DrawFlags.kDFOverlayed;

            _vgaSpriteChanged++;
        }

        private void vc81_setRandom()
        {
            ushort var = (ushort) VcReadNextWord();
            ushort value = (ushort) VcReadNextWord();

            _variableArray[var] = (short) _rnd.GetRandomNumber((uint) (value - 1));
        }

        private void vc82_getPathValue()
        {
            byte val;

            ushort var = (ushort) VcReadNextWord();

            if (GameType == SIMONGameType.GType_FF && GetBitFlag(82))
            {
                val = _pathValues1[_GPVCount1++];
            }
            else
            {
                val = _pathValues[_GPVCount++];
            }

            VcWriteVar(var, val);
        }

        private void vc83_playSoundLoop()
        {
            ushort sound = (ushort) VcReadNextWord();
            short vol = (short) VcReadNextWord();
            short pan = (short) VcReadNextWord();

            LoadSound(sound, pan, vol, SoundTypeFlags.SFX5);
        }

        private void vc84_stopSoundLoop()
        {
            _sound.StopSfx5();
        }

        protected override void SetupOpcodes()
        {
            _opcodes = new Dictionary<int, Action>
            {
                {1, o_at},
                {2, o_notAt},
                {5, o_carried},
                {6, o_notCarried},
                {7, o_isAt},
                {11, o_zero},
                {12, o_notZero},
                {13, o_eq},
                {14, o_notEq},
                {15, o_gt},
                {16, o_lt},
                {17, o_eqf},
                {18, o_notEqf},
                {19, o_ltf},
                {20, o_gtf},
                {23, off_chance},
                {25, o_isRoom},
                {26, o_isObject},
                {27, o_state},
                {28, o_oflag},
                {31, o_destroy},
                {33, o_place},
                {36, o_copyff},
                {37, off_jumpOut},
                {41, o_clear},
                {42, o_let},
                {43, o_add},
                {44, o_sub},
                {45, o_addf},
                {46, o_subf},
                {47, o_mul},
                {48, o_div},
                {49, o_mulf},
                {50, o_divf},
                {51, o_mod},
                {52, o_modf},
                {53, o_random},
                {55, o_goto},
                {56, o_oset},
                {57, o_oclear},
                {58, o_putBy},
                {59, o_inc},
                {60, o_dec},
                {61, o_setState},
                {62, o_print},
                {63, o_message},
                {64, o_msg},
                {65, off_addTextBox},
                {66, oww_setShortText},
                {67, oww_setLongText},
                {68, o_end},
                {69, o_done},
                {70, off_printLongText},
                {71, o_process},
                {76, o_when},
                {77, o_if1},
                {78, o_if2},
                {79, o_isCalled},
                {80, o_is},
                {82, o_debug},
                {83, os2_rescan},
                {87, o_comment},
                {90, o_getParent},
                {91, o_getNext},
                {92, o_getChildren},
                {96, o_picture},
                {97, o_loadZone},
                {98, os2_animate},
                {99, os2_stopAnimate},
                {100, o_killAnimate},
                {101, o_defWindow},
                {102, o_window},
                {103, o_cls},
                {104, o_closeWindow},
                {107, off_addBox},
                {108, o_delBox},
                {109, o_enableBox},
                {110, o_disableBox},
                {111, o_moveBox},
                {114, o_doIcons},
                {115, o_isClass},
                {116, o_setClass},
                {117, o_unsetClass},
                {119, o_waitSync},
                {120, o_sync},
                {121, o_defObj},
                {122, off_oracleTextDown},
                {123, off_oracleTextUp},
                {124, off_ifTime},
                {125, o_here},
                {126, o_doClassIcons},
                {130, o_setAdjNoun},
                {131, off_setTime},
                {132, off_saveUserGame},
                {133, off_loadUserGame},
                {134, off_listSaveGames},
                {135, off_checkCD},
                {136, o_copysf},
                {137, o_restoreIcons},
                {138, o_freezeZones},
                {139, o_placeNoIcons},
                {140, o_clearTimers},
                {141, o_setDollar},
                {142, o_isBox},
                {143, oe2_doTable},
                {151, oe2_storeItem},
                {152, oe2_getItem},
                {153, oe2_bSet},
                {154, oe2_bClear},
                {155, oe2_bZero},
                {156, oe2_bNotZero},
                {157, oe2_getOValue},
                {158, oe2_setOValue},
                {160, oe2_ink},
                {161, off_screenTextBox},
                {162, os1_screenTextMsg},
                {164, oe2_getDollar2},
                {165, off_isAdjNoun},
                {166, off_b2Set},
                {167, oe2_b2Clear},
                {168, oe2_b2Zero},
                {169, oe2_b2NotZero},
                {171, off_hyperLinkOn},
                {172, off_hyperLinkOff},
                {173, off_checkPaths},
                {175, oww_lockZones},
                {176, oww_unlockZones},
                {177, off_screenTextPObj},
                {178, os1_getPathPosn},
                {179, os1_scnTxtLongText},
                {180, off_mouseOn},
                {181, off_mouseOff},
                {182, off_loadVideo},
                {183, off_playVideo},
                {184, os1_unloadZone},
                {186, os1_unfreezeZones},
                {187, off_centerScroll},
                {188, os2_isShortText},
                {189, os2_clearMarks},
                {190, os2_waitMark},
                {191, off_resetPVCount},
                {192, off_setPathValues},
                {193, off_stopClock},
                {194, off_restartClock},
                {195, off_setColor},
                {196, off_b3Set},
                {197, off_b3Clear},
                {198, off_b3Zero},
                {199, off_b3NotZero},
            };
            _numOpcodes = 200;
        }

        protected override void ExecuteOpcode(int opcode)
        {
            _opcodes[opcode]();
        }

        protected override void ClearName()
        {
            StopAnimateSimon2(2, 6);
            _lastNameOn = null;
            _animatePointer = false;
            _mouseAnim = 1;
        }

        protected override void ResetVerbs()
        {
            _verbHitArea = 300;
            int cursor = 0;
            int animMax = 16;

            if (GetBitFlag(203))
            {
                cursor = 14;
                animMax = 9;
            }
            else if (GetBitFlag(204))
            {
                cursor = 15;
                animMax = 9;
            }
            else if (GetBitFlag(207))
            {
                cursor = 26;
                animMax = 2;
            }

            _mouseCursor = (byte) cursor;
            _mouseAnimMax = (byte) animMax;
            _mouseAnim = 1;
            _needHitAreaRecalc++;

            if (GetBitFlag(99))
            {
                SetVerb(null);
            }
        }

        protected override void SetVerb(HitArea ha)
        {
            int cursor = _mouseCursor;
            if (_noRightClick)
                return;

            if (cursor > 13)
                cursor = 0;
            cursor++;
            if (cursor == 5)
                cursor = 1;
            if (cursor == 4)
            {
                if (GetBitFlag(72))
                {
                    cursor = 1;
                }
            }
            else if (cursor == 2)
            {
                if (GetBitFlag(99))
                {
                    cursor = 3;
                }
            }

            _mouseCursor = (byte) cursor;
            _mouseAnimMax = (byte) (cursor == 4 ? 14 : 16);
            _mouseAnim = 1;
            _needHitAreaRecalc++;
            _verbHitArea = (ushort) (cursor + 300);
        }

        private void ScaleClip(short h, short w, short y, short x, short scrollY)
        {
            Rect srcRect, dstRect;
            float factor, xscale;

            srcRect.Left = 0;
            srcRect.Top = 0;
            srcRect.Right = w;
            srcRect.Bottom = h;

            if (scrollY > _baseY)
                factor = 1 + ((scrollY - _baseY) * _scale);
            else
                factor = 1 - ((_baseY - scrollY) * _scale);

            xscale = ((w * factor) / 2);

            dstRect.Left = (short) (x - xscale);
            if (dstRect.Left > _screenWidth - 1)
                return;
            dstRect.Top = (short) (y - (h * factor));
            if (dstRect.Top > _screenHeight - 1)
                return;

            dstRect.Right = (short) (x + xscale);
            dstRect.Bottom = y;

            _feebleRect = dstRect;

            _variableArray[20] = _feebleRect.Top;
            _variableArray[21] = _feebleRect.Left;
            _variableArray[22] = _feebleRect.Bottom;
            _variableArray[23] = _feebleRect.Right;

            Debug(5, "Left {0} Right {1} Top {2} Bottom {3}", dstRect.Left, dstRect.Right,
                dstRect.Top, dstRect.Bottom);

            // Unlike normal rectangles in ScummVM, it seems that in the case of
            // the destination rectangle the bottom and right coordinates are
            // considered to be inside the rectangle. For the source rectangle,
            // I believe that they are not.

            int scaledW = dstRect.Width + 1;
            int scaledH = dstRect.Height + 1;

            BytePtr src = ScaleBuf;
            BytePtr dst = BackBuf;

            dst += dstRect.Top * _backBuf.Pitch + dstRect.Left;

            for (int dstY = 0; dstY < scaledH; dstY++)
            {
                if (dstRect.Top + dstY >= 0 && dstRect.Top + dstY < _screenHeight)
                {
                    int srcY = (dstY * h) / scaledH;
                    BytePtr srcPtr = src + _scaleBuf.Pitch * srcY;
                    BytePtr dstPtr = dst + _backBuf.Pitch * dstY;
                    for (int dstX = 0; dstX < scaledW; dstX++)
                    {
                        if (dstRect.Left + dstX >= 0 && dstRect.Left + dstX < _screenWidth)
                        {
                            int srcX = (dstX * w) / scaledW;
                            if (srcPtr[srcX] != 0)
                                dstPtr[dstX] = srcPtr[srcX];
                        }
                    }
                }
            }
        }

        protected override void DrawImage(Vc10State state)
        {
            state.surf_addr = BackBuf;
            state.surf_pitch = _backBuf.Pitch;

            if (state.flags.HasFlag(DrawFlags.kDFCompressed))
            {
                if (state.flags.HasFlag(DrawFlags.kDFScaled))
                {
                    state.surf_addr = ScaleBuf;
                    state.surf_pitch = _scaleBuf.Pitch;

                    state.dl = state.width;
                    state.dh = state.height;

                    var dstPtr = state.surf_addr;
                    var w = 0;
                    do
                    {
                        var src = vc10_depackColumn(state);
                        var dst = dstPtr;

                        var h = 0;
                        do
                        {
                            dst.Value = src.Value;
                            dst += state.surf_pitch;
                            src.Offset++;
                        } while (++h != state.draw_height);
                        dstPtr.Offset++;
                    } while (++w != state.draw_width);

                    if (_vgaCurSpritePriority % 10 != 9)
                    {
                        _scaleX = state.x;
                        _scaleY = state.y;
                        _scaleWidth = (short) state.width;
                        _scaleHeight = (short) state.height;
                    }
                    else
                    {
                        ScaleClip((short) state.height, (short) state.width, state.y, state.x,
                            (short) (state.y + _scrollY));
                    }
                }
                else if (state.flags.HasFlag(DrawFlags.kDFOverlayed))
                {
                    state.surf_addr = ScaleBuf;
                    state.surf_pitch = _scaleBuf.Pitch;
                    state.surf_addr += (state.x + _scrollX) + (state.y + _scrollY) * state.surf_pitch;

                    state.dl = state.width;
                    state.dh = state.height;

                    var dstPtr = state.surf_addr;
                    var w = 0;
                    do
                    {
                        var src = vc10_depackColumn(state);
                        var dst = dstPtr;

                        var h = 0;
                        do
                        {
                            byte color = src.Value;
                            if (color != 0)
                                dst.Value = color;
                            dst += state.surf_pitch;
                            src.Offset++;
                        } while (++h != state.draw_height);
                        dstPtr.Offset++;
                    } while (++w != state.draw_width);

                    if (_vgaCurSpritePriority % 10 == 9)
                    {
                        ScaleClip(_scaleHeight, _scaleWidth, _scaleY, _scaleX, (short) (_scaleY + _scrollY));
                    }
                }
                else
                {
                    if (!DrawImageClip(state))
                    {
                        return;
                    }

                    state.surf_addr += state.x + state.y * state.surf_pitch;

                    BytePtr src, dst, dstPtr;

                    state.dl = state.width;
                    state.dh = state.height;

                    vc10_skip_cols(state);


                    if (state.flags.HasFlag(DrawFlags.kDFMasked))
                    {
                        if (GameType == SIMONGameType.GType_FF && !GetBitFlag(81))
                        {
                            if (state.x > _feebleRect.Right)
                            {
                                return;
                            }
                            if (state.y > _feebleRect.Bottom)
                            {
                                return;
                            }
                            if (state.x + state.width < _feebleRect.Left)
                            {
                                return;
                            }
                            if (state.y + state.height < _feebleRect.Top)
                            {
                                return;
                            }
                        }

                        dstPtr = state.surf_addr;
                        var w = 0;
                        do
                        {
                            src = vc10_depackColumn(state);
                            dst = dstPtr;

                            var h = 0;
                            do
                            {
                                var color = src.Value;
                                if (color != 0)
                                    dst.Value = color;
                                dst += state.surf_pitch;
                                src.Offset++;
                            } while (++h != state.draw_height);
                            dstPtr.Offset++;
                        } while (++w != state.draw_width);
                    }
                    else
                    {
                        dstPtr = state.surf_addr;
                        var w = 0;
                        do
                        {
                            src = vc10_depackColumn(state);
                            dst = dstPtr;

                            var h = 0;
                            do
                            {
                                var color = src.Value;
                                if (state.flags.HasFlag(DrawFlags.kDFNonTrans) || color != 0)
                                    dst.Value = color;
                                dst += state.surf_pitch;
                                src.Offset++;
                            } while (++h != state.draw_height);
                            dstPtr.Offset++;
                        } while (++w != state.draw_width);
                    }
                }
            }
            else
            {
                if (!DrawImageClip(state))
                {
                    return;
                }

                state.surf_addr += state.x + state.y * state.surf_pitch;

                var src = state.srcPtr + state.width * state.y_skip;
                var dst = state.surf_addr;
                do
                {
                    int count;
                    for (count = 0; count != state.draw_width; count++)
                    {
                        byte color;
                        color = src[count + state.x_skip];
                        if (color != 0)
                        {
                            if (state.flags.HasFlag(DrawFlags.kDFShaded) && color == 220)
                                color = 244;

                            dst[count] = color;
                        }
                    }
                    dst += state.surf_pitch;
                    src += state.width;
                } while (--state.draw_height != 0);
            }
        }

        protected override void ColorWindow(WindowBlock window)
        {
            _videoLockOut |= 0x8000;

            var dst = BackGround + _backGroundBuf.Pitch * window.y + window.x;

            for (var h = 0; h < window.height; h++)
            {
                for (var w = 0; w < window.width; w++)
                {
                    if (dst[w] == 113 || dst[w] == 116 || dst[w] == 252)
                        dst[w] = window.fillColor;
                }
                dst += _backGroundBuf.Pitch;
            }

            _videoLockOut = (ushort) (_videoLockOut & ~0x8000);
        }

        private void off_ifTime()
        {
            // 124: if time
            var a = GetVarOrWord();
            var t = GetTime() - _gameStoppedClock - a;
            SetScriptCondition(t >= _timeStore);
        }

        private void off_setTime()
        {
            // 131
            _timeStore = GetTime() - _gameStoppedClock;
        }

        private void off_saveUserGame()
        {
            // 132: save game
            _noOracleScroll = 0;
            OSystem.InputManager.ShowVirtualKeyboard();
            SaveUserGame((int) (CountSaveGames() + 1 - ReadVariable(55)));
            OSystem.InputManager.HideVirtualKeyboard();
        }

        private void SaveUserGame(int slot)
        {
            Stream @in;
            byte[] name = new byte[108];
            int len;

            var window = _windowArray[3];

            window.textRow = (short) ((slot + 1 - window.scrollY) * 15);
            window.textColumn = 26;

            if ((@in = OSystem.SaveFileManager.OpenForLoading(GenSaveName((int) ReadVariable(55)))) != null)
            {
                @in.Read(name, 0, 100);
                @in.Dispose();
            }

            len = 0;
            while (len < name.Length)
            {
                byte chr = name[len];
                window.textColumn += (short) GetFeebleFontSize(chr);
                len++;
            }

            WindowPutChar(window, 0x7f);
            while (!HasToQuit)
            {
                _keyPressed = new ScummInputState();
                Delay(1);

                var key = _keyPressed.GetKeys().FirstOrDefault();
                char c = ToChar(key);
                if (c == 0 || c >= 127)
                    continue;

                window.textColumn -= (short) GetFeebleFontSize(127);
                name[len] = 0;
                WindowBackSpace(_windowArray[3]);

                if (key == Core.KeyCode.Escape)
                {
                    _variableArray[55] = 27;
                    break;
                }
                if ( /*key == KeyCode.Enter ||*/ key == KeyCode.Return)
                {
                    if (!SaveGame((int) ReadVariable(55), name.GetRawText()))
                        _variableArray[55] = -1;
                    else
                        _variableArray[55] = 0;
                    break;
                }
                if (key == KeyCode.Backspace && len != 0)
                {
                    len--;
                    byte chr = name[len];
                    window.textColumn -= (short) GetFeebleFontSize(chr);
                    name[len] = 0;
                    WindowBackSpace(_windowArray[3]);
                }
                if (c >= 32 && window.textColumn + 26 <= window.width)
                {
                    name[len++] = (byte) c;
                    WindowPutChar(_windowArray[3], (byte) c);
                }

                WindowPutChar(window, 0x7f);
            }
        }

        private void WindowBackSpace(WindowBlock window)
        {
            _videoLockOut |= 0x8000;

            var x = window.x + window.textColumn;
            var y = window.y + window.textRow;

            var dst = BackGround + _backGroundBuf.Pitch * y + x;

            for (var h = 0; h < 13; h++)
            {
                for (var w = 0; w < 8; w++)
                {
                    if (dst[w] == 113 || dst[w] == 116 || dst[w] == 252)
                        dst[w] = 0;
                }
                dst += _backGroundBuf.Pitch;
            }

            _videoLockOut = (ushort) (_videoLockOut & ~0x8000);
        }

        private void off_loadUserGame()
        {
            // 133: load game
            if (ReadVariable(55) == 999)
            {
                LoadGame(GetFileName(GameFileTypes.GAME_RESTFILE), true);
            }
            else
            {
                LoadGame(GenSaveName((int) ReadVariable(55)));
            }
        }

        private void off_listSaveGames()
        {
            Stream @in;
            byte[] b = new byte[108];

            var maxFiles = (ushort) (CountSaveGames() - 1);
            var j = maxFiles;
            ushort k = 1;
            ushort z = maxFiles;
            if (GetBitFlag(95))
            {
                j++;
                z++;
            }

            while (!HasToQuit)
            {
                var OK = 1;
                if (GetBitFlag(93) || GetBitFlag(94))
                {
                    OK = 0;
                    if (j > z)
                        break;
                }

                if (GetBitFlag(93))
                {
                    if (((_newLines + 1) >= _textWindow.scrollY) && ((_newLines + 1) < (_textWindow.scrollY + 3)))
                        OK = 1;
                }

                if (GetBitFlag(94))
                {
                    if ((_newLines + 1) == (_textWindow.scrollY + 7))
                        OK = 1;
                }


                if (OK == 1)
                {
                    if (j == maxFiles + 1)
                    {
                        ShowMessageFormat("\n");
                        HyperLinkOn((ushort) (j + 400));
                        SetTextColor(116);
                        ShowMessageFormat(" {0}. ", 1);
                        HyperLinkOff();
                        SetTextColor(113);
                        k++;
                        j--;
                    }

                    if ((@in = OSystem.SaveFileManager.OpenForLoading(GenSaveName(j))) == null)
                        break;
                    @in.Read(b, 0, 100);
                    @in.Dispose();
                }

                ShowMessageFormat("\n");
                HyperLinkOn((ushort) (j + 400));
                SetTextColor(116);
                if (k < 10)
                    ShowMessageFormat(" ");
                ShowMessageFormat("{0}. ", k);
                SetTextColor(113);
                ShowMessageFormat("{0} ", b);
                HyperLinkOff();
                j--;
                k++;
            }
        }

        private void off_checkCD()
        {
            // 135: switch CD
            ushort disc = (ushort) ReadVariable(97);

            if (GetExtra() == "4CD")
            {
                _sound.SwitchVoiceFile(gss, disc);
            }
            else if (GetExtra() == "2CD")
            {
                if (disc == 1 || disc == 2)
                    _sound.SwitchVoiceFile(gss, 1);
                else if (disc == 3 || disc == 4)
                    _sound.SwitchVoiceFile(gss, 2);
            }

            Debug(0, "Switch to CD number {0}", disc);
        }

        private void off_screenTextBox()
        {
            // 161: setup text
            TextLocation tl = GetTextLocation(GetVarOrByte());

            tl.x = (short) GetVarOrWord();
            tl.y = (short) GetVarOrWord();
            tl.width = (short) GetVarOrWord();
        }

        private void off_isAdjNoun()
        {
            // 165: item unk1 unk2 is
            Item item = GetNextItemPtr();
            short a = (short) GetNextWord(), b = (short) GetNextWord();
            if (item.adjective == a && item.noun == b)
                SetScriptCondition(true);
            else if (a == -1 && item.noun == b)
                SetScriptCondition(true);
            else
                SetScriptCondition(false);
        }

        private void off_b2Set()
        {
            // 166: set bit2
            int bit = (int) GetVarOrByte();
            _bitArrayTwo[bit / 16] = (ushort) (_bitArrayTwo[bit / 16] | (1 << (bit & 15)));

            if (Features.HasFlag(GameFeatures.GF_BROKEN_FF_RATING))
            {
                switch (bit)
                {
                    case 152:
                        SetLoyaltyRating(1);
                        break;
                    case 153:
                        SetLoyaltyRating(2);
                        break;
                    case 240:
                        SetLoyaltyRating(3);
                        break;
                    case 251:
                        SetLoyaltyRating(4);
                        break;
                    case 253:
                        SetLoyaltyRating(6);
                        break;
                }
            }
        }

        private void SetLoyaltyRating(byte rating)
        {
            // WORKAROUND: The 4CD version of The Feeble File is missing the parts
            // of the script that set the loyalty rating. This approximates the
            // script from the 2CD version. See bug #6525.

            switch (rating)
            {
                case 1:
                    // Kicking vending machine: Possibility of Undesirable Character Flaws
                    WriteVariable(120, 1);
                    break;
                case 2:
                    // Confessing: Confirmed Minor Character Flaws
                    WriteVariable(120, 2);
                    break;
                case 3:
                    // Being sent to Cygnus Alpha: Suspected Subversive Activity
                    WriteVariable(120, 3);
                    break;
                case 4:
                    // Escaping from Cygnus Alpha: Confirmed Subversive Activity
                    WriteVariable(120, 4);
                    break;
                case 5:
                    // Being brought before Filbert: Confirmed Treasonous Activity
                    WriteVariable(120, 5);
                    break;
                case 6:
                    // Arriving at rebel base: Freedom Fighters Operative
                    WriteVariable(120, 6);
                    break;
            }
        }

        private void off_hyperLinkOn()
        {
            // 171: oracle hyperlink on
            HyperLinkOn((ushort) GetVarOrWord());
        }

        private void HyperLinkOn(ushort x)
        {
            if (!GetBitFlag(51))
                return;

            _hyperLink = x;
            _variableArray[50] = (short) (_textWindow.textColumn + _textWindow.x);
            _variableArray[51] = (short) (_textWindow.textRow + _textWindow.y +
                                          (_oracleMaxScrollY - _textWindow.scrollY) * 15);
        }

        private void off_hyperLinkOff()
        {
            // 172: oracle hyperlink off
            HyperLinkOff();
        }

        private void HyperLinkOff()
        {
            if (!GetBitFlag(51))
                return;

            _variableArray[52] = (short) (_textWindow.x + _textWindow.textColumn - _variableArray[50]);
            DefineBox(_variableArray[53], _variableArray[50], _variableArray[51], _variableArray[52], 15, 145, 208,
                DummyItem2);
            _variableArray[53]++;
            _hyperLink = 0;
        }

        private void off_checkPaths()
        {
            // 173 check paths
            int i, count;
            BytePtr pathVal1 = _pathValues1;
            bool result = false;

            count = _variableArray2[38];
            for (i = 0; i < count; i++)
            {
                byte val = pathVal1[2];
                if (val == _variableArray2[50] ||
                    val == _variableArray2[51] ||
                    val == _variableArray2[201] ||
                    val == _variableArray2[203] ||
                    val == _variableArray2[205] ||
                    val == _variableArray2[207] ||
                    val == _variableArray2[209] ||
                    val == _variableArray2[211] ||
                    val == _variableArray2[213] ||
                    val == _variableArray2[215] ||
                    val == _variableArray2[219] ||
                    val == _variableArray2[220] ||
                    val == _variableArray2[221] ||
                    val == _variableArray2[222] ||
                    val == _variableArray2[223] ||
                    val == _variableArray2[224] ||
                    val == _variableArray2[225] ||
                    val == _variableArray2[226])
                {
                    result = true;
                    break;
                }
                pathVal1 += 4;
            }

            _variableArray2[52] = (short) (result ? 1 : 0);
        }

        private void off_screenTextPObj()
        {
            // 177: inventory descriptions
            uint vgaSpriteId = GetVarOrByte();
            uint color = GetVarOrByte();
            var string_ptr = BytePtr.Null;
            TextLocation tl = null;
            byte[] buf = new byte[256];

            SubObject subObject = (SubObject) FindChildOfType(GetNextItemPtr(), ChildType.kObjectType);
            if (subObject != null && subObject.objectFlags.HasFlag(SubObjectFlags.kOFText))
            {
                string_ptr = GetStringPtrById((ushort) subObject.objectFlagValue[0]).GetBytes();
                tl = GetTextLocation(vgaSpriteId);
            }

            if (subObject != null && subObject.objectFlags.HasFlag(SubObjectFlags.kOFVoice))
            {
                int offs = GetOffsetOfChild2Param(subObject, (int) SubObjectFlags.kOFVoice);
                PlaySpeech((ushort) subObject.objectFlagValue[offs], (ushort) vgaSpriteId);
            }

            if (subObject != null && (subObject.objectFlags.HasFlag(SubObjectFlags.kOFText)) && _subtitles)
            {
                if (subObject.objectFlags.HasFlag(SubObjectFlags.kOFNumber))
                {
                    buf = string.Format("{0}{1}",
                            subObject.objectFlagValue[
                                GetOffsetOfChild2Param(subObject, (int) SubObjectFlags.kOFNumber)],
                            string_ptr.GetRawText())
                        .GetBytes();
                    string_ptr = buf;
                }
                if (string_ptr != null)
                    PrintScreenText(vgaSpriteId, color, string_ptr.GetRawText(), tl.x, tl.y, tl.width);
            }
        }

        private void off_mouseOn()
        {
            // 180: force mouseOn
            if (_mouseCursor != 5)
            {
                ResetVerbs();
                _noRightClick = false;
            }
            _mouseHideCount = 0;
        }

        private void off_mouseOff()
        {
            // 181: force mouseOff
            ScriptMouseOff();
            ClearName();
        }

        private void off_loadVideo()
        {
            // 182: load video file
            var filename = GetStringPtrById((ushort) GetNextStringID());

            _moviePlayer = MakeMoviePlayer(this, filename);

            _moviePlayer.Load();

            if (Features.HasFlag(GameFeatures.GF_BROKEN_FF_RATING))
            {
                if (filename == "Statue1.smk")
                {
                    SetLoyaltyRating(5);
                }
            }
        }

        private void off_playVideo()
        {
            // 183: play video
            if (GetBitFlag(40))
            {
                // Omni TV controls
                if (_moviePlayer != null)
                {
                    SetBitFlag(42, false);
                    _interactiveVideo = VideoFlags.TYPE_OMNITV;
                    _moviePlayer.Play();
                }
                else
                {
                    _variableArray[254] = 6747;
                }
            }
            else
            {
                _moviePlayer.Play();

                _moviePlayer.Dispose();
                _moviePlayer = null;
            }
        }

        private void off_centerScroll()
        {
            // 187
            CenterScroll();
        }

        protected override void AnimateSprites()
        {
            if (_paletteFlag == 2)
                _paletteFlag = 1;

            if (_scrollCount != 0)
            {
                ScrollEvent();
            }

            if (GetBitFlag(84))
            {
                AnimateSpritesByY();
                return;
            }

            Ptr<VgaSprite> vsp = _vgaSprites;
            while (vsp.Value.id != 0)
            {
                vsp.Value.windowNum = (ushort) (vsp.Value.windowNum & ~0x8000);

                var vpe = _vgaBufferPointers[vsp.Value.zoneNum];
                _curVgaFile1 = vpe.vgaFile1;
                _curVgaFile2 = vpe.vgaFile2;
                _curSfxFile = vpe.sfxFile;
                _windowNum = vsp.Value.windowNum;
                _vgaCurSpriteId = vsp.Value.id;
                _vgaCurSpritePriority = vsp.Value.priority;

                DrawImageInit(vsp.Value.image, vsp.Value.palette, vsp.Value.x, vsp.Value.y, vsp.Value.flags);
                vsp.Offset++;
            }

            _displayFlag++;
        }

        protected override void AddArrows(WindowBlock window, byte num)
        {
            var h = FindEmptyHitArea();
            var ha = h.Value;
            _scrollUpHitArea = (ushort) h.Offset;

            ha.x = 496;
            ha.y = 279;
            ha.width = 30;
            ha.height = 45;
            ha.flags = BoxFlags.kBFBoxInUse | BoxFlags.kBFNoTouchName;
            ha.id = 0x7FFB;
            ha.priority = 100;
            ha.window = window;
            ha.verb = 1;

            h = FindEmptyHitArea();
            ha = h.Value;
            _scrollDownHitArea = (ushort) h.Offset;

            ha.x = 496;
            ha.y = 324;
            ha.width = 30;
            ha.height = 44;
            ha.flags = BoxFlags.kBFBoxInUse | BoxFlags.kBFNoTouchName;
            ha.id = 0x7FFC;
            ha.priority = 100;
            ha.window = window;
            ha.verb = 1;
        }

        protected override void QuickLoadOrSave()
        {
            // Quick loading and saving isn't possible in The Feeble Files or Puzzle Pack.
        }

        protected override void PrintScreenText(uint vgaSpriteId, uint color, string str, short x, short y, short width)
        {
            var @string = new BytePtr(str.GetBytes());
            byte[] convertedString = new byte[320];
            BytePtr convertedString2 = convertedString;
            BytePtr string2 = @string;
            short height, talkDelay;
            int stringLength = str.Length;
            const int textHeight = 15;

            height = textHeight;

            talkDelay = (short) ((stringLength + 3) / 3);
            if (_variableArray[86] == 0)
                talkDelay /= 2;
            if (_variableArray[86] == 2)
                talkDelay *= 2;
            _variableArray[85] = (short) (talkDelay * 5);

            System.Diagnostics.Debug.Assert(stringLength > 0);

            while (true)
            {
                ushort pixels;
                string2 = GetPixelLength(@string.GetRawText(), (ushort) width, out pixels).GetBytes();
                ushort spaces;
                if (string2.Value == 0)
                {
                    spaces = (ushort) ((width - pixels) / 12);
                    if (spaces != 0)
                        spaces--;
                    while (spaces != 0)
                    {
                        convertedString2.Value = (byte) ' ';
                        convertedString2.Offset++;
                        spaces--;
                    }
                    @string.Copy(convertedString2, @string.GetTextLength());
                    break;
                }
                while (string2.Value != ' ')
                {
                    byte chr = string2.Value;
                    pixels -= (_language == Language.PL_POL) ? PolishCharWidth[chr] : CharWidth[chr];
                    string2.Offset--;
                }
                spaces = (ushort) ((width - pixels) / 12);
                if (spaces != 0)
                    spaces--;
                while (spaces != 0)
                {
                    convertedString2.Value = (byte) ' ';
                    convertedString2.Offset++;
                    spaces--;
                }
                ushort b = (ushort) (string2.Offset - @string.Offset);
                @string.Copy(convertedString2, b);
                convertedString2 += b;
                convertedString2.Value = (byte) '\n';
                convertedString2.Offset++;
                height += textHeight;
                y -= textHeight;
                if (y < 2)
                    y = 2;
                @string = string2;
            }

            StopAnimateSimon2(2, (ushort) vgaSpriteId);

            RenderString(1, color, (ushort) width, (ushort) height, convertedString);

            Animate(4, 2, (ushort) vgaSpriteId, x, y, 12);
        }

        private void AnimateSpritesByY()
        {
            short[,] spriteTable = new short[180, 2];

            int y;
            uint numSprites = 0;

            Ptr<VgaSprite> vsp = _vgaSprites;
            while (vsp.Value.id != 0)
            {
                if (vsp.Value.flags.HasFlag(DrawFlags.kDFScaled))
                {
                    y = vsp.Value.y;
                }
                else if (vsp.Value.flags.HasFlag(DrawFlags.kDFMasked))
                {
                    VgaPointersEntry vpe = _vgaBufferPointers[vsp.Value.zoneNum];
                    var src = vpe.vgaFile2 + vsp.Value.image * 8;
                    var height = src.ToUInt16(4) & 0x7FFF;
                    y = vsp.Value.y + height;
                }
                else
                {
                    y = vsp.Value.priority;
                }

                spriteTable[numSprites, 0] = (short) y;
                spriteTable[numSprites, 1] = (short) numSprites;
                numSprites++;
                vsp.Offset++;
            }

            while (true)
            {
                y = spriteTable[0, 0];
                var slot = spriteTable[0, 1];

                for (var i = 0; i < numSprites; i++)
                {
                    if (y >= spriteTable[i, 0])
                    {
                        y = spriteTable[i, 0];
                        slot = spriteTable[i, 1];
                    }
                }

                if (y == 9999)
                    break;

                for (var i = 0; i < numSprites; i++)
                {
                    if (slot == spriteTable[i, 1])
                    {
                        spriteTable[i, 0] = 9999;
                        break;
                    }
                }

                vsp = new Ptr<VgaSprite>(_vgaSprites, slot);

                vsp.Value.windowNum = (ushort) (vsp.Value.windowNum & ~0x8000);

                var vpe = _vgaBufferPointers[vsp.Value.zoneNum];
                _curVgaFile1 = vpe.vgaFile1;
                _curVgaFile2 = vpe.vgaFile2;
                _curSfxFile = vpe.sfxFile;
                _windowNum = vsp.Value.windowNum;
                _vgaCurSpriteId = vsp.Value.id;
                _vgaCurSpritePriority = vsp.Value.priority;

                DrawImageInit(vsp.Value.image, vsp.Value.palette, vsp.Value.x, vsp.Value.y, vsp.Value.flags);
            }

            _displayFlag++;
        }

        private void CenterScroll()
        {
            short tmp;

            if (_scrollXMax != 0)
            {
                _scrollCount = 0;
                var x = (short) (_variableArray[15] - _scrollX);
                if (x < 17 || (GetBitFlag(85) && x < 320))
                {
                    x -= 320;
                    if (_scrollX < -x)
                        x = (short) -_scrollX;
                    _scrollCount = x;
                }
                else if ((GetBitFlag(85) && x >= 320) || x >= 624)
                {
                    x -= 320;
                    tmp = (short) (_scrollXMax - _scrollX);
                    if (tmp < x)
                        x = tmp;
                    _scrollCount = x;
                }
            }
            else if (_scrollYMax != 0)
            {
                _scrollCount = 0;
                var y = (short) (_variableArray[16] - _scrollY);
                if (y < 30)
                {
                    y -= 240;
                    if (_scrollY < -y)
                        y = (short) -_scrollY;
                    _scrollCount = y;
                }
                else if (y >= 460)
                {
                    y -= 240;
                    tmp = (short) (_scrollYMax - _scrollY);
                    if (tmp < y)
                        y = tmp;
                    _scrollCount = y;
                }
            }
        }

        private void off_resetPVCount()
        {
            // 191
            if (GetBitFlag(83))
            {
                _PVCount1 = 0;
                _GPVCount1 = 0;
            }
            else
            {
                _PVCount = 0;
                _GPVCount = 0;
            }
        }

        private void off_setPathValues()
        {
            // 192
            byte a = (byte) GetVarOrByte();
            byte b = (byte) GetVarOrByte();
            byte c = (byte) GetVarOrByte();
            byte d = (byte) GetVarOrByte();
            if (GetBitFlag(83))
            {
                _pathValues1[_PVCount1++] = a;
                _pathValues1[_PVCount1++] = b;
                _pathValues1[_PVCount1++] = c;
                _pathValues1[_PVCount1++] = d;
            }
            else
            {
                _pathValues[_PVCount++] = a;
                _pathValues[_PVCount++] = b;
                _pathValues[_PVCount++] = c;
                _pathValues[_PVCount++] = d;
            }
        }

        private void off_stopClock()
        {
            // 193: pause clock
            _clockStopped = GetTime();
        }

        private void off_restartClock()
        {
            // 194: resume clock
            if (_clockStopped != 0)
                _gameStoppedClock += GetTime() - _clockStopped;
            _clockStopped = 0;
        }

        private void off_setColor()
        {
            // 195: set palette color
            ushort c = (ushort) (GetVarOrByte() * 3);
            byte r = (byte) GetVarOrByte();
            byte g = (byte) GetVarOrByte();
            byte b = (byte) GetVarOrByte();

            DisplayPalette[c] = Color.FromRgb(r, g, b);

            _paletteFlag = 2;
        }

        private void off_b3Set()
        {
            // 196: set bit3
            byte bit = (byte) GetVarOrByte();
            _bitArrayThree[bit / 16] = (ushort) (_bitArrayThree[bit / 16] | (1 << (bit & 15)));
        }

        private void off_b3Clear()
        {
            // 197: clear bit3
            byte bit = (byte) GetVarOrByte();
            _bitArrayThree[bit / 16] = (ushort) (_bitArrayThree[bit / 16] & ~(1 << (bit & 15)));
        }

        private void off_b3Zero()
        {
            // 198: is bit3 clear
            byte bit = (byte) GetVarOrByte();
            SetScriptCondition((_bitArrayThree[bit / 16] & (1 << (bit & 15))) == 0);
        }

        private void off_b3NotZero()
        {
            // 199: is bit3 set
            byte bit = (byte) GetVarOrByte();
            SetScriptCondition((_bitArrayThree[bit / 16] & (1 << (bit & 15))) != 0);
        }

        private void off_oracleTextUp()
        {
            OracleTextUp();
        }

        private void off_oracleTextDown()
        {
            OracleTextDown();
        }

        protected override void RunSubroutine101()
        {
            if ((GamePlatform == Platform.Amiga || GamePlatform == Platform.Macintosh) &&
                GameType == SIMONGameType.GType_FF)
            {
                PlayVideo("epic.dxa");
            }

            base.RunSubroutine101();
        }

        private void off_chance()
        {
            // 23
            ushort a = (ushort) GetVarOrWord();

            if (a == 0)
            {
                SetScriptCondition(false);
                return;
            }

            if (a == 100)
            {
                SetScriptCondition(true);
                return;
            }

            SetScriptCondition(_rnd.GetRandomNumber(99) < a);
        }

        private void off_jumpOut()
        {
            // 37
            GetVarOrByte();
            SetScriptReturn(1);
        }

        private void off_addTextBox()
        {
            // 65: add hit area
            BoxFlags flags = BoxFlags.kBFTextBox | BoxFlags.kBFBoxItem;
            int id = (int) GetVarOrWord();
            int @params = id / 1000;
            int x, y, w, h, num;

            id %= 1000;

            if ((@params & 1) != 0)
                flags |= BoxFlags.kBFInvertTouch;

            x = (int) GetVarOrWord();
            y = (int) GetVarOrWord();
            w = (int) GetVarOrWord();
            h = (int) GetVarOrWord();
            num = (int) GetVarOrByte();
            if (num < _numTextBoxes)
                DefineBox(id, x, y, w, h, (int) (flags + (num << 8)), 208, DummyItem2);
        }

        private void off_printLongText()
        {
            // 70: show string from array
            int num = (int) GetVarOrByte();
            var str = GetStringPtrById(_longText[num]);
            SendInteractText((ushort) num, "{0}. {1}\n", num, str);
        }

        private void off_addBox()
        {
            // 107: add item hitarea
            BoxFlags flags = 0;
            int id = (int) GetVarOrWord();
            int @params = id / 1000;
            int x, y, w, h, verb;

            id = id % 1000;

            if ((@params & 1) != 0)
                flags |= BoxFlags.kBFInvertTouch;
            if ((@params & 2) != 0)
                flags |= BoxFlags.kBFNoTouchName;
            if ((@params & 4) != 0)
                flags |= BoxFlags.kBFBoxItem;
            if ((@params & 8) != 0)
                flags |= BoxFlags.kBFTextBox;
            if ((@params & 16) != 0)
                flags |= BoxFlags.kBFHyperBox;

            x = (int) GetVarOrWord();
            y = (int) GetVarOrWord();
            w = (int) GetVarOrWord();
            h = (int) GetVarOrWord();
            var item = GetNextItemPtrStrange();
            verb = (int) GetVarOrWord();
            DefineBox(id, x, y, w, h, (int) flags, verb, item);
        }

        protected void PlayVideo(string filename, bool lastSceneUsed = false)
        {
            if (HasToQuit)
                return;

            if (lastSceneUsed)
                SetBitFlag(41, true);

            using (_moviePlayer = MakeMoviePlayer(this, filename))
            {
                _moviePlayer.Load();
                _moviePlayer.Play();
            }

            _moviePlayer = null;

            if (lastSceneUsed)
                SetBitFlag(41, false);
        }

        protected IMoviePlayer MakeMoviePlayer(AgosEngineFeeble vm, string name)
        {
            string filename;

            int baseLen = name.Length - 4;
            var baseName = name.Substring(0, baseLen);

            if (vm.Language == Language.DE_DEU && baseLen >= 8)
            {
                // Check short filename to work around
                // bug in a German Windows 2CD version.
                string shortName = baseName.Substring(0, 6);

                filename = $"{shortName}~1.dxa";
                if (FileExists(filename))
                {
                    baseName = filename.Substring(0, 8);
                }

                filename = $"{shortName}~1.smk";
                if (FileExists(filename))
                {
                    baseName = filename.Substring(0, 8);
                }
            }

//            filename = $"{baseName}.dxa";
//            if (FileExists(filename))
//            {
//                return new MoviePlayerDXA(vm, baseName);
//            }

            filename = $"{baseName}.smk";
            if (FileExists(filename))
            {
                return new MoviePlayerSmk(vm, baseName);
            }

            // TODO: Common::String buf = Common::String::format(_("Cutscene file '%s' not found!"), baseName);
            //GUI::MessageDialog dialog(buf, "OK");
            // dialog.runModal();

            return null;
        }

        public void FillBackFromFront()
        {
            LockScreen(screen =>
            {
                var src = screen.Pixels;
                var dst = BackBuf;

                for (int i = 0; i < _screenHeight; i++)
                {
                    src.Copy(dst, _screenWidth);
                    src += screen.Pitch;
                    dst += _backBuf.Pitch;
                }
            });
        }

        protected override void HitareaLeave(HitArea ha, bool state = false)
        {
            InvertBox(ha, state);
        }

        private void InvertBox(HitArea ha, bool state)
        {
            if (GetBitFlag(205) || GetBitFlag(206))
            {
                if (state)
                {
                    _mouseAnimMax = _oldMouseAnimMax;
                    _mouseCursor = _oldMouseCursor;
                }
                else if (_mouseCursor != 18)
                {
                    _oldMouseCursor = _mouseCursor;
                    _animatePointer = false;
                    _oldMouseAnimMax = _mouseAnimMax;
                    _mouseAnimMax = 2;
                    _mouseCursor = 18;
                }
            }
            else
            {
                if (GetBitFlag(207))
                {
                    if (state)
                    {
                        _noRightClick = false;
                        ResetVerbs();
                    }
                    else
                    {
                        int cursor = ha.id + 9;
                        if (cursor >= 23)
                            cursor = 21;
                        _mouseCursor = (byte) cursor;
                        _mouseAnimMax = 8;
                        _noRightClick = true;
                    }
                }
                else
                {
                    Ptr<VgaSprite> vsp = _vgaSprites;

                    int id = ha.id - 43;
                    while (vsp.Value.id != 0)
                    {
                        if (vsp.Value.id == id && vsp.Value.zoneNum == 2)
                        {
                            if (!state)
                                vsp.Value.flags |= DrawFlags.kDFShaded;
                            else
                                vsp.Value.flags &= ~DrawFlags.kDFShaded;
                            break;
                        }
                        vsp.Offset++;
                    }
                }
            }
        }

        private void PrintInteractText(ushort num, string @string)
        {
            byte[] convertedString = new byte[320];
            BytePtr convertedString2 = convertedString;
            ushort height = 15;
            ushort w = 0xFFFF;
            ushort x;
            byte[] tmp;

            // It doesn't really matter what 'w' is to begin with, as long as it's
            // something that cannot be generated by getPixelLength(). The original
            // used 620, which was a potential problem.

            while (true)
            {
                ushort pixels;
                var str2 = GetPixelLength(@string, 620, out pixels).GetBytes();
                BytePtr string2 = str2;
                if (string2.Value == 0x00)
                {
                    if (w == 0xFFFF)
                        w = pixels;
                    tmp = @string.GetBytes();
                    Array.Copy(tmp, 0, convertedString2.Data, convertedString2.Offset, Math.Min(tmp.Length, 320));
                    break;
                }
                while (string2.Value != ' ')
                {
                    byte chr = string2.Value;
                    pixels -= _language == Language.PL_POL ? PolishCharWidth[chr] : CharWidth[chr];
                    string2.Offset--;
                }
                if (w == 0xFFFF)
                    w = pixels;
                ushort b = (ushort) string2.Offset;
                tmp = @string.GetBytes();
                tmp.CopyTo(convertedString2.Data, convertedString2.Offset);
                convertedString2.Offset += tmp.Length;
                convertedString2.Value = (byte) '\n';
                height += 15;
                @string = string2.GetRawText();
            }

            // ScrollX
            x = (ushort) _variableArray[251];
            x += 20;

            if (num == 1)
                _interactY = 385;

            // Returned values for box definition
            _variableArray[51] = (short) x;
            _variableArray[52] = (short) _interactY;
            _variableArray[53] = (short) w;
            _variableArray[54] = (short) height;

            StopAnimateSimon2(2, (ushort) (num + 6));
            RenderString(num, 0, w, height, convertedString);
            Animate(4, 2, (ushort) (num + 6), (short) x, (short) _interactY, 12);

            _interactY += height;
        }

        protected override void TimerProc()
        {
            if ((_videoLockOut & 0x80E9) != 0 || ((_videoLockOut & 2) != 0))
                return;

            _syncCount++;

            _videoLockOut |= 2;

            if (0 == (_videoLockOut & 0x10))
            {
                _syncFlag2 = !_syncFlag2;
                if (!_syncFlag2)
                {
                    ProcessVgaEvents();
                }
                else
                {
                    // Double speed on Oracle
                    if (GameType == SIMONGameType.GType_FF && GetBitFlag(99))
                    {
                        ProcessVgaEvents();
                    }
                    else if (_scrollCount == 0)
                    {
                        _videoLockOut = (ushort) (_videoLockOut & ~2);
                        return;
                    }
                }

                if (GameType == SIMONGameType.GType_FF && _interactiveVideo != 0)
                {
                    // Controls Omni TV videos
                    if (GetBitFlag(42))
                    {
                        StopInteractiveVideo();
                    }
                    else
                    {
                        _moviePlayer.NextFrame();
                    }
                }

                AnimateSprites();
            }

            if (_displayFlag != 0)
            {
                if (GameType == SIMONGameType.GType_FF && !(Features.HasFlag(GameFeatures.GF_DEMO)))
                {
                    if (!GetBitFlag(78))
                    {
                        OracleLogo();
                    }
                    if (GetBitFlag(76))
                    {
                        SwapCharacterLogo();
                    }
                }
                HandleMouseMoved();
                DisplayScreen();
                _displayFlag = 0;
            }

            _videoLockOut = (ushort) (_videoLockOut & ~2);
        }

        private void SwapCharacterLogo()
        {
            Rect srcRect, dstRect;
            dstRect.Left = 64;
            dstRect.Top = 16;
            dstRect.Right = 106;
            dstRect.Bottom = 59;

            srcRect.Top = 0;
            srcRect.Bottom = 43;

            int x = _variableArray[91];
            if (x > _variableArray[90])
                x--;
            if (x < _variableArray[90])
                x++;
            _variableArray[91] = (short) x;

            x++;
            x *= 42;

            srcRect.Left = (short) x;
            srcRect.Right = (short) (srcRect.Left + 42);

            BytePtr src = new BytePtr(_iconFilePtr, srcRect.Top * 336 + srcRect.Left);
            var dst = BackBuf + _backBuf.Pitch * dstRect.Top + dstRect.Left;

            for (var h = 0; h < dstRect.Height; h++)
            {
                for (var w = 0; w < dstRect.Width; w++)
                {
                    if (src[w] != 0)
                        dst[w] = src[w];
                }
                src += 336;
                dst += _backBuf.Pitch;
            }
        }

        private void OracleLogo()
        {
            Rect srcRect, dstRect;

            dstRect.Left = 16;
            dstRect.Top = 16;
            dstRect.Right = 58;
            dstRect.Bottom = 59;

            srcRect.Left = 0;
            srcRect.Top = 0;
            srcRect.Right = 42;
            srcRect.Bottom = 43;

            BytePtr src = _iconFilePtr;
            BytePtr dst = BackBuf + _backBuf.Pitch * dstRect.Top + dstRect.Left;

            for (var h = 0; h < dstRect.Height; h++)
            {
                for (var w = 0; w < dstRect.Width; w++)
                {
                    if (src[w] != 0)
                        dst[w] = src[w];
                }
                src += 336;
                dst += _backBuf.Pitch;
            }
        }

        protected void StopInteractiveVideo()
        {
            if (_interactiveVideo != (VideoFlags) 0)
            {
                _interactiveVideo = 0;
                _moviePlayer.StopVideo();
                _moviePlayer.Dispose();
                _moviePlayer = null;
            }
        }

        private void SendInteractText(ushort num, string fmt, params object[] args)
        {
            var @string = string.Format(fmt, args);

            PrintInteractText(num, @string);
        }

        private void OracleTextUp()
        {
            ChangeWindow(3);
            _noOracleScroll = 0;

            if (_textWindow.scrollY > _oracleMaxScrollY) // For scroll up
                _oracleMaxScrollY = (ushort) _textWindow.scrollY;
            while (!HasToQuit)
            {
                if (_textWindow.scrollY == _oracleMaxScrollY)
                    break;
                _textWindow.textRow = 105;
                var i = 0;
                for (i = 0; i < 5; i++)
                {
                    _newLines = 0;
                    _textWindow.textColumn = 0;
                    _textWindow.textRow -= 3;
                    if (i == 2)
                    {
                        _textWindow.scrollY += 1;
                        _textWindow.textRow += 15;
                        LinksUp();
                    }
                    ScrollOracleUp();
                    SetBitFlag(94, true);
                    var sub = GetSubroutineByID((uint) _variableArray[104]);
                    if (sub != null)
                        StartSubroutineEx(sub);
                    SetBitFlag(94, false);
                }
                if (_currentBoxNum != 601 || !GetBitFlag(89))
                    break;
                Delay(100);
            }
        }

        private void OracleTextDown()
        {
            ChangeWindow(3);
            _noOracleScroll = 0;

            if (_textWindow.scrollY > _oracleMaxScrollY) // For scroll up
                _oracleMaxScrollY = (ushort) _textWindow.scrollY;
            while (!HasToQuit)
            {
                if (_textWindow.scrollY == 0)
                    break;

                for (var i = 0; i < 5; i++)
                {
                    _newLines = 0;
                    _textWindow.textColumn = 0;
                    _textWindow.textRow = (short) ((i + 1) * 3);
                    if (i == 4)
                    {
                        _textWindow.scrollY -= 1;
                        _textWindow.textRow = 0;
                        LinksDown();
                    }
                    ScrollOracleDown();
                    SetBitFlag(93, true);
                    var sub = GetSubroutineByID((uint) _variableArray[104]);
                    if (sub != null)
                        StartSubroutineEx(sub);
                    SetBitFlag(93, false);
                }
                if (_currentBoxNum != 600 || !GetBitFlag(89))
                    break;
                Delay(100);
            }
        }

        private void LinksUp()
        {
            // Scroll Oracle Links
            for (var j = 700; j < _variableArray[53]; j++)
            {
                MoveBox(j, 0, -15);
            }
        }

        private void LinksDown()
        {
            for (var i = 700; i < _variableArray[53]; i++)
            {
                MoveBox(i, 0, 15);
            }
        }

        private void ScrollOracleUp()
        {
            var dst = BackGround + 103 * _backGroundBuf.Pitch + 136;
            var src = BackGround + 106 * _backGroundBuf.Pitch + 136;

            for (var h = 0; h < 21; h++)
            {
                ushort w;
                for (w = 0; w < 360; w++)
                {
                    if (dst[w] == 0 || dst[w] == 113 || dst[w] == 116 || dst[w] == 252)
                        dst[w] = src[w];
                }
                dst += _backGroundBuf.Pitch;
                src += _backGroundBuf.Pitch;
            }

            for (var h = 0; h < 80; h++)
            {
                src.Copy(dst, 360);
                dst += _backGroundBuf.Pitch;
                src += _backGroundBuf.Pitch;
            }

            for (var h = 0; h < 3; h++)
            {
                Array.Clear(dst.Data, dst.Offset, 360);
                dst += _backGroundBuf.Pitch;
                src += _backGroundBuf.Pitch;
            }
        }

        private void ScrollOracleDown()
        {
            var src = BackGround + 203 * _backGroundBuf.Pitch + 136;
            var dst = BackGround + 206 * _backGroundBuf.Pitch + 136;

            for (var h = 0; h < 77; h++)
            {
                src.Copy(dst, 360);
                dst -= _backGroundBuf.Pitch;
                src -= _backGroundBuf.Pitch;
            }

            for (var h = 0; h < 24; h++)
            {
                for (var w = 0; w < 360; w++)
                {
                    if (src[w] == 0)
                        dst[w] = src[w];

                    if (src[w] == 113 || src[w] == 116 || src[w] == 252)
                    {
                        dst[w] = src[w];
                        src[w] = 0;
                    }
                }
                dst -= _backGroundBuf.Pitch;
                src -= _backGroundBuf.Pitch;
            }
        }
    }
}