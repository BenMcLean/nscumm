//
//  QueenEngine.cs
//
//  Author:
//       scemino <scemino74@gmail.com>
//
//  Copyright (c) 2016 scemino
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
using System;
using NScumm.Core;
using NScumm.Core.IO;
using NScumm.Core.Graphics;
using System.IO;
using D = NScumm.Core.DebugHelper;
using System.Diagnostics;

namespace NScumm.Queen
{
    public enum InkColor
    {
        INK_BG_PANEL = 0,
        INK_JOURNAL = 1,
        INK_PINNACLE_ROOM = 2,
        INK_CMD_SELECT = 3,
        INK_CMD_NORMAL = 4,
        INK_TALK_NORMAL = 5,
        INK_JOE = 6,
        INK_OUTLINED_TEXT = 7,

        INK_COUNT = 8
    }

    class Palette
    {
        public Color[] room;
        public Color[] screen;
        public Color[] panel;
        public int dirtyMin, dirtyMax;
        public bool scrollable;
    }

    class TextSlot
    {
        public ushort x;
        public byte color;
        public string text;
        public bool outlined;
    }

    class Dynalum
    {
        public bool valid;
        public byte[] mskBuf;
        public uint mskSize;
        public byte[] lumBuf;
        public uint lumSize;
        public byte prevColMask;
    }

    public class Display
    {
        const int FADE_SPEED = 16;
        const int D_BLOCK_W = 8;
        const int D_BLOCK_H = 8;

        const int BACKDROP_W = 640;
        const int BACKDROP_H = 200;
        const int SCREEN_W = 320;
        const int SCREEN_H = 200;
        const int PANEL_W = 320;
        const int PANEL_H = 50;

        QueenEngine _vm;
        ISystem _system;
        bool _fullscreen;
        byte[] _font;

        /// <summary>
        /// Font justification sizes.
        /// </summary>
        byte[] _charWidth = new byte[256];

        byte[] _screenBuf;
        byte[] _panelBuf;
        byte[] _backdropBuf;

        int _fullRefresh;

        int _dirtyBlocksWidth;
        int _dirtyBlocksHeight;
        byte[] _dirtyBlocks;

        Palette _pal;
        string _imageExt;

        int _curTextColor;
        byte[] _inkColors;
        TextSlot[] _texts;
        ushort _bdWidth, _bdHeight;
        Dynalum _dynalum;
        short _horizontalScroll;
        Action[] _effects;
        int _current;
        private short scrollx;
        private short j, jdir = 2;

        Random _rnd;

        private static readonly Color[] _palJoeClothes = {
                 Color.FromRgb(0x00, 0x00, 0x00), Color.FromRgb(0x60, 0x60, 0x60), Color.FromRgb(0x87, 0x87, 0x87), Color.FromRgb(0xB0, 0xB0, 0xB0), Color.FromRgb(0xDA, 0xDA, 0xDA),
                 Color.FromRgb(0x43, 0x34, 0x20), Color.FromRgb(0x77, 0x33, 0x1F), Color.FromRgb(0xA3, 0x43, 0x27), Color.FromRgb(0x80, 0x45, 0x45), Color.FromRgb(0x9E, 0x5D, 0x5B),
                 Color.FromRgb(0xB9, 0x78, 0x75), Color.FromRgb(0xDF, 0x97, 0x91), Color.FromRgb(0x17, 0x27, 0x63), Color.FromRgb(0x1F, 0x3F, 0x83), Color.FromRgb(0x27, 0x5B, 0xA7), Color.FromRgb(0x98, 0xD4, 0xFF)
        };

        private static readonly Color[] _palJoeDress = {
                 Color.FromRgb(0x00, 0x00, 0x00), Color.FromRgb(0x50, 0x50, 0x50), Color.FromRgb(0x70, 0x70, 0x70), Color.FromRgb(0x90, 0x90, 0x90), Color.FromRgb(0xC6, 0xC6, 0xC6),
                 Color.FromRgb(0xFF, 0xFF, 0xFF), Color.FromRgb(0x30, 0x30, 0x90), Color.FromRgb(0x47, 0x49, 0xD0), Color.FromRgb(0x40, 0x24, 0x00), Color.FromRgb(0x79, 0x34, 0x0B),
                 Color.FromRgb(0xB2, 0x3D,0x22), Color.FromRgb(0xED, 0x42, 0x42), Color.FromRgb(0x80, 0x45, 0x45), Color.FromRgb(0xA3, 0x5F, 0x5F), Color.FromRgb(0xC8, 0x7C, 0x7C), Color.FromRgb(0xEC, 0x9C, 0x9C)
        };

        private static readonly int[] dx = { -1, 0, 1, 1, 1, 0, -1, -1 };
        private static readonly int[] dy = { -1, -1, -1, 0, 1, 1, 1, 0 };

        public short HorizontalScroll
        {
            get { return _horizontalScroll; }
            set
            {
                if (_horizontalScroll != value)
                {
                    _fullRefresh = 2;
                    _horizontalScroll = value;
                }
            }
        }

        public bool Fullscreen
        {
            get
            {
                return _fullscreen;
            }
            set
            {
                _fullRefresh = 2;
                _fullscreen = value;
            }
        }

        public bool Shake
        {
            get
            {
                return _system.GraphicsManager.ShakePosition != 0;
            }
            set
            {
                _system.GraphicsManager.ShakePosition = value ? 3 : 0;
            }
        }

        public Display(QueenEngine vm, ISystem system)
        {
            _vm = vm;
            _system = system;
            _fullscreen = true;
            //TODO: _rnd = new RandomSource()
            _rnd = new Random();

            InitFont();

            _screenBuf = new byte[SCREEN_W * SCREEN_H];
            _panelBuf = new byte[PANEL_W * PANEL_H];
            _backdropBuf = new byte[BACKDROP_W * BACKDROP_H];
            _texts = new TextSlot[Defines.GAME_SCREEN_HEIGHT];
            for (int i = 0; i < _texts.Length; i++)
            {
                _texts[i] = new TextSlot();
            }
            _effects = new Action[] {
                BlankScreenEffect1, BlankScreenEffect2, BlankScreenEffect3
            };

            _fullRefresh = 1;
            _dirtyBlocksWidth = SCREEN_W / D_BLOCK_W;
            _dirtyBlocksHeight = SCREEN_H / D_BLOCK_H;
            _dirtyBlocks = new byte[_dirtyBlocksWidth * _dirtyBlocksHeight];
            _dynalum = new Dynalum();

            _pal = new Palette();
            _pal.room = new Color[256];
            _pal.screen = new Color[256];
            _pal.panel = new Color[112];

            _pal.dirtyMin = 0;
            _pal.dirtyMax = 255;
            _pal.scrollable = true;

            _imageExt = (_vm.Resource.Platform == Platform.Amiga) ? "LBM" : "PCX";

            _curTextColor = 0;

            SetupInkColors();
        }

        public void SetTextCentered(ushort y, string text, bool outlined)
        {
            int len = string.IsNullOrEmpty(text) ? 0 : text.Length;
            int t = 0;
            int x;
            while ((x = (short)((Defines.GAME_SCREEN_WIDTH - TextWidth(text, t, (ushort)len)) / 2)) <= 0)
            {
                ++t;
                len -= 2;
            }
            //assert(y < GAME_SCREEN_HEIGHT);
            TextSlot pts = _texts[y];
            pts.x = (ushort)x;
            pts.color = (byte)_curTextColor;
            pts.outlined = outlined;
            pts.text = text?.Substring(0, len);
        }

        public void TextColor(ushort y, byte color)
        {
            _texts[y].color = color;
        }

        /// <summary>
        /// Mark all palette entries as dirty.
        /// </summary>
        /// <returns>The set all dirty.</returns>
        public void PalSetAllDirty()
        {
            _pal.dirtyMin = 0; _pal.dirtyMax = 255;
        }

        /// <summary>
        /// Grey the panel area (used when panel is disabled)
        /// </summary>
        /// <returns>The grey panel.</returns>
        public void PalGreyPanel()
        {
            D.Debug(9, "Display::palGreyPanel()");
            var tempPal = new Color[256];
            for (int i = 224; i < 256; i++)
            {
                var c = _pal.screen[i].G * 2 / 3;
                tempPal[i] = Color.FromRgb(c, c, c);
            }
            PalSet(tempPal, 224, 255, true);
        }

        public void DrawBobSprite(byte[] data, int offset, ushort x, ushort y, ushort w, ushort h, ushort pitch, bool xflip)
        {
            Blit(_screenBuf, SCREEN_W, x, y, data, offset, pitch, w, h, xflip, true);
            SetDirtyBlock((ushort)(xflip ? (x - w + 1) : x), y, w, h);
        }

        /// <summary>
        /// Mark the specified block as dirty.
        /// </summary>
        /// <returns>The dirty block.</returns>
        /// <param name="x">The x coordinate.</param>
        /// <param name="y">The y coordinate.</param>
        /// <param name="w">The width.</param>
        /// <param name="h">The height.</param>
        private void SetDirtyBlock(ushort x, ushort y, ushort w, ushort h)
        {
            if (_fullRefresh < 2)
            {
                if (x >= SCREEN_W)
                {
                    return;
                }
                else if (x + w > SCREEN_W)
                {
                    w = (ushort)(SCREEN_W - x);
                }
                if (y >= SCREEN_H)
                {
                    return;
                }
                else if (y + h > SCREEN_H)
                {
                    h = (ushort)(SCREEN_H - y);
                }
                ushort ex = (ushort)((x + w - 1) / D_BLOCK_W);
                ushort ey = (ushort)((y + h - 1) / D_BLOCK_H);
                x /= D_BLOCK_W;
                y /= D_BLOCK_H;
                var p = new ByteAccess(_dirtyBlocks, _dirtyBlocksWidth * y + x);
                for (; y <= ey; ++y)
                {
                    p.Data.Set(p.Offset, 2, ex - x + 1);
                    p.Offset += _dirtyBlocksWidth;
                }
            }
        }

        public void BlankScreen()
        {
            _effects[_current]();
            _current = (_current + 1) % _effects.Length;
            ForceFullRefresh();
        }

        public byte GetInkColor(InkColor color) { return _inkColors[(int)color]; }

        public void Update(bool dynalum = false, short dynaX = 0, short dynaY = 0)
        {
            DrawTexts();
            if (_pal.scrollable && dynalum)
            {
                DynalumUpdate(dynaX, dynaY);
            }
            if (_pal.dirtyMin != 144 || _pal.dirtyMax != 144)
            {
                PalSet(_pal.screen, _pal.dirtyMin, _pal.dirtyMax);
                _pal.dirtyMin = 144;
                _pal.dirtyMax = 144;
            }
            // uncomment this line to disable the dirty blocks rendering
            //  _fullRefresh = 1;
            if (_fullRefresh != 0)
            {
                _system.GraphicsManager.CopyRectToScreen(_screenBuf, SCREEN_W, 0, 0, SCREEN_W, SCREEN_H);
                _system.GraphicsManager.UpdateScreen();
                --_fullRefresh;
                if (_fullRefresh != 0)
                {
                    Array.Clear(_dirtyBlocks, 0, _dirtyBlocksWidth * _dirtyBlocksHeight);
                }
                D.Debug(9, $"Display::update() - Full blit ({_fullRefresh})");
            }
            else
            {
                ushort count = 0;
                var scrBuf = _screenBuf;
                var s = 0;
                var dbBuf = _dirtyBlocks;
                var d = 0;
                for (int j = 0; j < _dirtyBlocksHeight; ++j)
                {
                    ushort accW = 0;
                    for (int i = 0; i < _dirtyBlocksWidth; ++i)
                    {
                        if (dbBuf[d + i] != 0)
                        {
                            --dbBuf[d + i];
                            ++accW;
                        }
                        else if (accW != 0)
                        {
                            int x = (i - accW) * D_BLOCK_W;
                            _system.GraphicsManager.CopyRectToScreen(scrBuf, s + x, SCREEN_W, x, j * D_BLOCK_H, accW * D_BLOCK_W, D_BLOCK_H);
                            accW = 0;
                            ++count;
                        }
                    }
                    if (accW != 0)
                    {
                        int x = (_dirtyBlocksWidth - accW) * D_BLOCK_W;
                        _system.GraphicsManager.CopyRectToScreen(scrBuf, s + x, SCREEN_W, x, j * D_BLOCK_H, accW * D_BLOCK_W, D_BLOCK_H);
                        ++count;
                    }
                    d += _dirtyBlocksWidth;
                    s += SCREEN_W * D_BLOCK_H;
                }
                if (count != 0)
                {
                    _system.GraphicsManager.UpdateScreen();
                }
                D.Debug(9, $"Display::update() - Dirtyblocks blit ({count})");
            }
        }

        public void DrawBox(short x1, short y1, short x2, short y2, byte col)
        {
            int i;
            for (i = y1; i <= y2; ++i)
            {
                _screenBuf[i * SCREEN_W + x1] = _screenBuf[i * SCREEN_W + x2] = col;
            }
            SetDirtyBlock((ushort)x1, (ushort)y1, 1, (ushort)(y2 - y1));
            SetDirtyBlock((ushort)x2, (ushort)y1, 1, (ushort)(y2 - y1));
            for (i = x1; i <= x2; ++i)
            {
                _screenBuf[y1 * SCREEN_W + i] = _screenBuf[y2 * SCREEN_W + i] = col;
            }
            SetDirtyBlock((ushort)x1, (ushort)y1, (ushort)(x2 - x1), 1);
            SetDirtyBlock((ushort)x1, (ushort)y2, (ushort)(x2 - x1), 1);
        }

        public void SetFocusRect(Rect focus)
        {
            // TODO: _system.SetFocusRectangle(rect);
        }

        public ushort TextWidth(string text, int offset = 0)
        {
            return TextWidth(text, offset, (ushort)text.Length);
        }

        public ushort TextWidth(string text, int offset, ushort len)
        {
            ushort width = 0;
            for (var i = offset; i < offset + len; ++i)
            {
                width += _charWidth[(byte)text[i]];
            }
            return width;
        }

        /// <summary>
        /// Change the current text color.
        /// </summary>
        /// <returns>The current color.</returns>
        /// <param name="color">Color.</param>
        public void TextCurrentColor(byte color)
        {
            _curTextColor = color;
        }

        /// <summary>
        /// Add the specified text to the texts list.
        /// </summary>
        /// <returns>The text.</returns>
        /// <param name="x">The x coordinate.</param>
        /// <param name="y">The y coordinate.</param>
        /// <param name="text">Text.</param>
        /// <param name="outlined">Outlined.</param>
        public void SetText(ushort x, ushort y, string text, bool outlined = true)
        {
            if (y < Defines.GAME_SCREEN_HEIGHT)
            {
                if (x == 0) x = 1;
                if (y == 0) y = 1;
                TextSlot pts = _texts[y];
                pts.x = x;
                pts.color = (byte)_curTextColor;
                pts.outlined = outlined;
                pts.text = text;
            }
        }

        /// <summary>
        /// Custom palette scroll for the specified room.
        /// </summary>
        /// <returns>The custom scroll.</returns>
        /// <param name="roomNum">Room number.</param>
        public void PalCustomScroll(ushort roomNum)
        {
            D.Debug(9, $"Display::palCustomScroll({roomNum})");

            if (!_pal.scrollable)
            {
                return;
            }

            int hiPal = 0;
            int loPal = 255;
            int i;

            ++scrollx;

            if (_vm.Resource.Platform == Platform.Amiga)
            {
                switch (roomNum)
                {
                    case 4:
                        if ((scrollx & 1) == 0)
                        {
                            PalScroll(24, 26);
                            loPal = 24;
                            hiPal = 26;
                        }
                        break;
                    case 74:
                        PalScroll(28, 31);
                        loPal = 28;
                        hiPal = 31;
                        break;
                }
                _pal.dirtyMin = Math.Min(_pal.dirtyMin, loPal);
                _pal.dirtyMax = Math.Max(_pal.dirtyMax, hiPal);
                return;
            }

            switch (roomNum)
            {
                case 123:
                    {
                        for (i = 96; i < 111; ++i)
                        {
                            _pal.screen[i] = Color.FromRgb(
                                Math.Min(255, _pal.room[i].R + j * 8),
                                Math.Min(255, _pal.room[i].G + j * 4),
                                _pal.room[i].B);
                        }
                        j += jdir;
                        if (j <= 0 || j >= 18)
                        {
                            jdir = (short)-jdir;
                        }
                        loPal = 96;
                        hiPal = 111;
                    }
                    break;
                case 124:
                    {
                        for (i = 80; i < 144; ++i)
                        {
                            _pal.screen[i] = Color.FromRgb(
                                Math.Min(255, _pal.room[i].R + j * 8),
                                Math.Min(255, _pal.room[i].G + j * 4),
                                _pal.room[i].B);
                        }
                        j += jdir;
                        if (j <= 0 || j >= 14)
                        {
                            jdir = (short)-jdir;
                            if (_rnd.Next(1 + 1) != 0)
                            {
                                if (Math.Abs(jdir) == 1)
                                {
                                    jdir *= 2;
                                }
                                else
                                {
                                    jdir /= 2;
                                }
                            }
                        }
                        loPal = 80;
                        hiPal = 143;
                    }
                    break;
                case 125:
                    PalScroll(32, 63);
                    PalScroll(64, 95);
                    loPal = 32;
                    hiPal = 95;
                    break;
                case 100:
                    if ((scrollx & 1) != 0)
                    {
                        PalScroll(128, 132);
                        PalScroll(133, 137);
                        PalScroll(138, 143);
                        loPal = 128;
                        hiPal = 143;
                    }
                    break;
                case 102:
                    if ((scrollx & 1) != 0)
                    {
                        PalScroll(112, 127);
                        loPal = 112;
                        hiPal = 127;
                    }
                    break;
                case 62:
                    if ((scrollx & 1) != 0)
                    {
                        PalScroll(108, 119);
                        loPal = 108;
                        hiPal = 119;
                    }
                    break;
                case 25:
                    PalScroll(116, 123);
                    loPal = 116;
                    hiPal = 123;
                    break;
                case 59:
                    if ((scrollx & 1) != 0)
                    {
                        PalScroll(56, 63);
                        loPal = 56;
                        hiPal = 63;
                    }
                    break;
                case 39:
                    PalScroll(112, 143);
                    loPal = 112;
                    hiPal = 143;
                    break;
                case 74:
                    PalScroll(28, 31);
                    PalScroll(88, 91);
                    PalScroll(92, 95);
                    PalScroll(128, 135);
                    if ((scrollx & 1) != 0)
                    {
                        PalScroll(136, 143);
                    }
                    loPal = 28;
                    hiPal = 143;
                    break;
                case 40:
                    if ((scrollx & 1) != 0)
                    {
                        PalScroll(96, 103);
                    }
                    if ((scrollx & 3) != 0)
                    {
                        PalScroll(104, 107);
                    }
                    loPal = 96;
                    hiPal = 107;
                    break;
                case 97:
                    if ((scrollx & 1) != 0)
                    {
                        PalScroll(96, 107);
                        PalScroll(108, 122);
                        loPal = 96;
                        hiPal = 122;
                    }
                    break;
                case 55:
                    PalScroll(128, 143);
                    loPal = 128;
                    hiPal = 143;
                    break;
                case 57:
                    PalScroll(128, 143);
                    if ((scrollx & 1) != 0)
                    {
                        PalScroll(96, 103);
                    }
                    loPal = 96;
                    hiPal = 143;
                    break;
                case 76:
                    PalScroll(88, 95);
                    loPal = 88;
                    hiPal = 95;
                    break;
                case 2:
                    if ((scrollx & 1) != 0)
                    {
                        PalScroll(120, 127);
                        loPal = 120;
                        hiPal = 127;
                    }
                    break;
                case 3:
                case 5:
                    if ((scrollx & 1) != 0)
                    {
                        PalScroll(128, 135);
                        PalScroll(136, 143);
                        loPal = 128;
                        hiPal = 143;
                    }
                    break;
                case 7:
                    if ((scrollx & 1) != 0)
                    {
                        PalScroll(119, 127);
                        loPal = 119;
                        hiPal = 127;
                    }
                    break;
                case 42:
                    if ((scrollx & 1) != 0)
                    {
                        PalScroll(118, 127);
                        PalScroll(136, 143);
                        loPal = 118;
                        hiPal = 143;
                    }
                    break;
                case 4:
                    if ((scrollx & 1) != 0)
                    {
                        PalScroll(32, 47);
                    }
                    PalScroll(64, 70);
                    PalScroll(71, 79);
                    loPal = 32;
                    hiPal = 79;
                    break;
                case 8:
                    if ((scrollx & 1) != 0)
                    {
                        PalScroll(120, 127);
                    }
                    loPal = 120;
                    hiPal = 127;
                    break;
                case 12:
                case 64:
                    if ((scrollx & 1) != 0)
                    {
                        PalScroll(112, 119);
                        PalScroll(120, 127);
                        loPal = 112;
                        hiPal = 127;
                    }
                    break;
                case 49:
                    PalScroll(101, 127);
                    loPal = 101;
                    hiPal = 127;
                    break;
            }
            _pal.dirtyMin = Math.Min(_pal.dirtyMin, loPal);
            _pal.dirtyMax = Math.Max(_pal.dirtyMax, hiPal);
        }

        public void PrepareUpdate()
        {
            int h = Defines.GAME_SCREEN_HEIGHT;
            if (!_fullscreen)
            {
                h = Defines.ROOM_ZONE_HEIGHT;
                Array.Copy(_panelBuf, 0, _screenBuf, SCREEN_W * Defines.ROOM_ZONE_HEIGHT, PANEL_W * PANEL_H);
            }
            var dst = _screenBuf;
            int d = 0;
            var src = _backdropBuf;
            int s = _horizontalScroll;

            while ((--h) != 0)
            {
                Array.Copy(src, s, dst, d, SCREEN_W);
                d += SCREEN_W;
                s += BACKDROP_W;
            }
        }

        public void HorizontalScrollUpdate(short xCamera)
        {
            D.Debug(9, $"Display::horizontalScrollUpdate({xCamera})");
            if (_bdWidth <= 320)
            {
                HorizontalScroll = 0;
            }
            else
            {
                if (xCamera > 160 && xCamera < 480)
                {
                    HorizontalScroll = (short)(xCamera - 160);
                }
                else if (xCamera >= 480)
                {
                    HorizontalScroll = 320;
                }
                else
                {
                    HorizontalScroll = 0;
                }
            }
        }

        public void DrawBobPasteDown(byte[] data, ushort x, ushort y, ushort w, ushort h)
        {
            Blit(_backdropBuf, BACKDROP_W, x, y, data, 0, w, w, h, false, true);
        }

        /// <summary>
        /// Fade the current palette out.
        /// </summary>
        /// <returns>The fade out.</returns>
        /// <param name="roomNum">Room number.</param>
        public void PalFadeOut(ushort roomNum)
        {
            D.Debug(9, $"Display::palFadeOut({roomNum})");
            _pal.scrollable = false;
            int n = GetNumColorsForRoom(roomNum);
            if (IsPalFadingDisabled(roomNum))
            {
                Array.Clear(_pal.screen, 0, n);
                PalSet(_pal.screen, 0, n - 1, true);
            }
            else
            {
                var tempPal = new Color[256];
                Array.Copy(_pal.screen, tempPal, n);
                for (int i = FADE_SPEED; i >= 0; --i)
                {
                    for (int j = 0; j < n; ++j)
                    {
                        _pal.screen[j] = Color.FromRgb(
                            tempPal[j].R * i / FADE_SPEED,
                            tempPal[j].G * i / FADE_SPEED,
                            tempPal[j].B * i / FADE_SPEED);
                    }
                    PalSet(_pal.screen, 0, n - 1, true);
                }
            }
        }

        public void DrawInventoryItem(byte[] data, ushort x, ushort y, ushort w, ushort h)
        {
            if (data != null)
            {
                if (_vm.Resource.Platform == Platform.Amiga)
                {
                    var dst = _panelBuf;
                    var d = y * PANEL_W + x;
                    var s = 0;
                    for (int j = 0; j < h; ++j)
                    {
                        for (int i = 0; i < w; ++i)
                        {
                            dst[d + i] = (byte)(144 + data[s++]);
                        }
                        d += PANEL_W;
                    }
                }
                else
                {
                    Blit(_panelBuf, PANEL_W, x, y, data, 0, w, w, h, false, false);
                }
            }
            else
            {
                Fill(_panelBuf, PANEL_W, x, y, w, h, GetInkColor(InkColor.INK_BG_PANEL));
            }
            SetDirtyBlock(x, (ushort)(150 + y), w, h);
        }

        /// <summary>
        /// Fade the current palette in.
        /// </summary>
        public void PalFadeIn(ushort roomNum, bool dynalum = false, short dynaX = 0, short dynaY = 0)
        {
            D.Debug(9, $"Display::palFadeIn({roomNum})");
            int n = GetNumColorsForRoom(roomNum);
            Array.Copy(_pal.room, _pal.screen, n);
            if (!IsPalFadingDisabled(roomNum))
            {
                if (dynalum)
                {
                    DynalumUpdate(dynaX, dynaY);
                }
                var tempPal = new Color[256];
                for (int i = 0; i <= FADE_SPEED; ++i)
                {
                    for (int j = 0; j < n; ++j)
                    {
                        tempPal[j] = _pal.screen[j] * i / FADE_SPEED;
                    }
                    PalSet(tempPal, 0, n - 1, true);
                }
            }
            _pal.dirtyMin = 0;
            _pal.dirtyMax = n - 1;
            _pal.scrollable = true;
        }

        /// <summary>
        /// Force a full refresh (bypassing the dirtyblocks rendering), on next screen update.
        /// </summary>
        public void ForceFullRefresh()
        {
            _fullRefresh = 2;
        }

        public void SetupNewRoom(string name, ushort room)
        {
            DynalumInit(name, room);

            uint dataSize;
            var dataName = $"{name}.{_imageExt}";
            var data = _vm.Resource.LoadFile(dataName, 0, out dataSize);

            if (_vm.Resource.Platform == Platform.Amiga)
            {
                DecodeIFF(data, dataSize, _backdropBuf, BACKDROP_W, out _bdWidth, out _bdHeight, _pal.room, 0, 32);
                if (_bdHeight < BACKDROP_H)
                {
                    Array.Clear(_backdropBuf, _bdHeight * BACKDROP_W, (BACKDROP_H - _bdHeight) * BACKDROP_W);
                }
            }
            else
            {
                int n = GetNumColorsForRoom(room);
                if (n != 256)
                {
                    n = 144;
                }
                DecodePCX(data, dataSize, _backdropBuf, 0, BACKDROP_W, out _bdWidth, out _bdHeight, _pal.room, 0, (ushort)n);
            }

            PalCustomColors(room);
            ForceFullRefresh();
        }

        /// <summary>
        /// Process a 'palette flash' effect.
        /// </summary>
        /// <returns>The custom flash.</returns>
        public void PalCustomFlash()
        {
            Color[] tempPal = new Color[256];
            tempPal.Set(0, Color.FromRgb(255, 255, 255), 17);
            tempPal.Set(17, Color.FromRgb(0, 0, 0), 67);
            tempPal.Set(17 + 67, Color.FromRgb(255, 255, 255), 172);
            // set flash palette
            PalSet(tempPal, 0, 255, true);
            // restore original palette
            PalSet(_pal.screen, 0, 255, true);
        }

        /// <summary>
        /// Change fullscreen/panel mode.
        /// </summary>
        /// <returns>The mode.</returns>
        /// <param name="comPanel">COM panel.</param>
        /// <param name="inCutaway">In cutaway.</param>
        public void ScreenMode(int comPanel, bool inCutaway)
        {
            D.Debug(6, $"Display::screenMode({comPanel}, {inCutaway})");

            if (comPanel == 2 && inCutaway)
            {
                Fullscreen = (_bdHeight == Defines.GAME_SCREEN_HEIGHT);
            }
            else if (comPanel == 1)
            {
                Fullscreen = false;
            }
        }

        /// <summary>
        /// Show/hide mouse cursor.
        /// </summary>
        /// <returns>The mouse cursor.</returns>
        /// <param name="show">Show.</param>
        public void ShowMouseCursor(bool show)
        {
            _system.GraphicsManager.IsCursorVisible = show;
        }

        public void SetupPanel()
        {
            ushort panelWidth, panelHeight;

            uint dataSize;
            var dataName = $"PANEL.{_imageExt}";
            var data = _vm.Resource.LoadFile(dataName, 0, out dataSize);

            if (_vm.Resource.Platform == Platform.Amiga)
            {
                DecodeIFF(data, dataSize, _panelBuf, PANEL_W, out panelWidth, out panelHeight, _pal.panel, 0, 32, 144);
            }
            else
            {
                data.WriteUInt16(14, PANEL_H - 10);
                DecodePCX(data, dataSize, _panelBuf, PANEL_W * 10, PANEL_W, out panelWidth, out panelHeight, _pal.panel, 144, 256);
            }
            PalSetPanel();
        }

        /// <summary>
        /// Remove entries from the texts list.
        /// </summary>
        /// <returns>The texts.</returns>
        /// <param name="y1">The first y value.</param>
        /// <param name="y2">The second y value.</param>
        public void ClearTexts(ushort y1, ushort y2)
        {
            if (y1 > y2)
                throw new ArgumentException(nameof(y1));
            if (y2 >= Defines.GAME_SCREEN_HEIGHT)
                throw new ArgumentException(nameof(y1));
            while (y1 <= y2)
            {
                _texts[y1].text = string.Empty;
                ++y1;
            }
        }

        /// <summary>
        /// Change mouse cursor bitmap.
        /// </summary>
        /// <returns>The mouse cursor.</returns>
        /// <param name="cursorData">Cursor data.</param>
        /// <param name="width">Width.</param>
        /// <param name="height">Height.</param>
        public void SetMouseCursor(byte[] cursorData, ushort width, ushort height)
        {
            _system.GraphicsManager.SetCursor(cursorData, 0, width, height, new Point(1, 1), keyColor: 0);
        }

        /// <summary>
        /// Setup palette for panel and inventory objects.
        /// </summary>
        /// <returns>The set panel.</returns>
        public void PalSetPanel()
        {
            Array.Copy(_pal.panel, 0, _pal.room, 144, (256 - 144));
            Array.Copy(_pal.panel, 0, _pal.screen, 144, (256 - 144));
        }

        public int TextCenterX(string text)
        {
            return (Defines.GAME_SCREEN_WIDTH - TextWidth(text)) / 2;
        }

        /// <summary>
        /// Setup palette for Joe's normal clothes.
        /// </summary>
        /// <returns>The set joe normal.</returns>
        public void PalSetJoeNormal()
        {
            if (_vm.Resource.Platform == Platform.DOS)
            {
                Array.Copy(_palJoeClothes, 0, _pal.room, 144, 16);
                Array.Copy(_palJoeClothes, 0, _pal.screen, 144, 16);
                PalSet(_pal.screen, 144, 159, true);
            }
        }

        /// <summary>
        /// Setup palette for Joe's dress.
        /// </summary>
        /// <returns>The set joe dress.</returns>
        public void PalSetJoeDress()
        {
            if (_vm.Resource.Platform == Platform.DOS)
            {
                Array.Copy(_palJoeDress, 0, _pal.room, 144, 16);
                Array.Copy(_palJoeDress, 0, _pal.screen, 144, 16);
                PalSet(_pal.screen, 144, 159, true);
            }
        }

        public void PalCustomLightsOff(ushort roomNum)
        {
            if (_vm.Resource.Platform == Platform.Amiga)
            {
                Array.Clear(_pal.screen, 0, 31);
                _pal.screen[31] = Color.FromRgb(15, 15, 0);
                PalSet(_pal.screen, 0, 31, true);
            }
            else
            {
                const int end = 223;
                int start = (roomNum == Defines.ROOM_FLODA_FRONTDESK) ? 32 : 16;
                int n = end - start + 1;
                Array.Clear(_pal.screen, start, n);
                PalSet(_pal.screen, start, end, true);
            }
            _pal.scrollable = false;
        }

        public void PalCustomLightsOn(ushort roomNum)
        {
            if (_vm.Resource.Platform == Platform.Amiga)
            {
                Array.Copy(_pal.room, _pal.screen, 32);
                PalSet(_pal.screen, 0, 31, true);
            }
            else
            {
                const int end = 223;
                int start = (roomNum == Defines.ROOM_FLODA_FRONTDESK) ? 32 : 0;
                int n = end - start + 1;
                Array.Copy(_pal.room, start, _pal.screen, start, n);
                PalSet(_pal.screen, start, end, true);
            }
            _pal.dirtyMin = 0;
            _pal.dirtyMax = 223;
            _pal.scrollable = true;
        }

        private void BlankScreenEffect1()
        {
            var buf = new byte[32 * 32];
            while (_vm.Input.IdleTime >= Input.DELAY_SCREEN_BLANKER)
            {
                for (int i = 0; i < 2; ++i)
                {
                    int x = _rnd.Next(1 + (SCREEN_W - 32 - 2) + 1);
                    int y = _rnd.Next(1 + SCREEN_H - 32 - 2) + 1;
                    var p = SCREEN_W * y + x;
                    for (int j = 0; j < 32; ++j)
                    {
                        Array.Copy(_screenBuf, p, buf, j * 32, 32);
                        p += SCREEN_W;
                    }
                    if (_rnd.Next(1 + 1) != 0)
                    {
                        ++x;
                    }
                    else
                    {
                        --x;
                    }
                    if (_rnd.Next(1 + 1) != 0)
                    {
                        ++y;
                    }
                    else
                    {
                        --y;
                    }
                    _system.GraphicsManager.CopyRectToScreen(buf, 32, x, y, 32, 32);
                    _vm.Input.Delay(10);
                }
            }
        }

        private void BlankScreenEffect2()
        {
            while (_vm.Input.IdleTime >= Input.DELAY_SCREEN_BLANKER)
            {
                int x = _rnd.Next(1 + SCREEN_W - 2);
                int y = _rnd.Next(1 + SCREEN_H - 2);
                var p = y * SCREEN_W + x;
                byte c = 0;
                switch (_rnd.Next(1 + 3))
                {
                    case 0:
                        c = _screenBuf[p];
                        break;
                    case 1:
                        c = _screenBuf[p + 1];
                        break;
                    case 2:
                        c = _screenBuf[p + SCREEN_W];
                        break;
                    case 3:
                        c = _screenBuf[p + SCREEN_W + 1];
                        break;
                }
                _screenBuf.Set(p, c, 2);
                _screenBuf.Set(p + SCREEN_W, c, 2);
                _system.GraphicsManager.CopyRectToScreen(_screenBuf, p, SCREEN_W, x, y, 2, 2);
                _vm.Input.Delay(10);
            }
        }

        private void BlankScreenEffect3()
        {
            var i = 0;
            while (_vm.Input.IdleTime >= Input.DELAY_SCREEN_BLANKER)
            {
                if (i > 4000000)
                {
                    Array.Clear(_screenBuf, 0, SCREEN_W * SCREEN_H);
                    _system.GraphicsManager.CopyRectToScreen(_screenBuf, SCREEN_W, 0, 0, SCREEN_W, SCREEN_H);
                }
                else
                {
                    int x = _rnd.Next(1 + SCREEN_W - 2);
                    int y = _rnd.Next(1 + SCREEN_H - 2);
                    var p = SCREEN_W * y + x;
                    int sum = _screenBuf[p] + _screenBuf[p + 1] + _screenBuf[p + SCREEN_W] + _screenBuf[p + SCREEN_W + 1];
                    var c = (byte)(sum / 4);
                    _screenBuf.Set(p, c, 2);
                    _screenBuf.Set(p + SCREEN_W, c, 2);
                    ++i;
                    _system.GraphicsManager.CopyRectToScreen(_screenBuf, p, SCREEN_W, x, y, 2, 2);
                }
                _vm.Input.Delay(10);
            }
        }

        /// <summary>
        /// Update dynalum for the current room.
        /// </summary>
        /// <returns>The update.</returns>
        /// <param name="x">The x coordinate.</param>
        /// <param name="y">The y coordinate.</param>
        private void DynalumUpdate(short x, short y)
        {
            if (!_dynalum.valid)
                return;

            if (x < 0)
            {
                x = 0;
            }
            else if (x > _bdWidth)
            {
                x = (short)_bdWidth;
            }
            if (y < 0)
            {
                y = 0;
            }
            else if (y > Defines.ROOM_ZONE_HEIGHT - 1)
            {
                y = Defines.ROOM_ZONE_HEIGHT - 1;
            }

            uint offset = (uint)((y / 4) * 160 + (x / 4));
            Debug.Assert(offset < _dynalum.mskSize);

            byte colMask = _dynalum.mskBuf[offset];
            D.Debug(9, $"Display::dynalumUpdate({x}, {y}) - colMask = {colMask}");
            if (colMask != _dynalum.prevColMask)
            {
                for (int i = 144; i < 160; ++i)
                {
                    short c = (short)(_pal.room[i].R + _dynalum.lumBuf[colMask + 0] * 4);
                    short c1 = (short)(_pal.room[i].G + _dynalum.lumBuf[colMask + 1] * 4);
                    short c2 = (short)(_pal.room[i].B + _dynalum.lumBuf[colMask + 2] * 4);
                    _pal.screen[i] = Color.FromRgb(
                        ScummHelper.Clip(c, 0, 255),
                        ScummHelper.Clip(c1, 0, 255),
                        ScummHelper.Clip(c2, 0, 255));
                }
                _pal.dirtyMin = Math.Min(_pal.dirtyMin, 144);
                _pal.dirtyMax = Math.Max(_pal.dirtyMax, 159);
                _dynalum.prevColMask = colMask;
            }
        }

        /// <summary>
        /// Draw the text lists.
        /// </summary>
        /// <returns>The texts.</returns>
        private void DrawTexts()
        {
            for (int y = Defines.GAME_SCREEN_HEIGHT - 1; y > 0; --y)
            {
                var pts = _texts[y];
                if (!string.IsNullOrEmpty(pts.text))
                {
                    try
                    {
                        DrawText(pts.x, (ushort)y, pts.color, pts.text, pts.outlined);
                    }
                    catch (IndexOutOfRangeException e) {
                        int tmp = 42;
                    }
                }
            }
        }

        private void DrawText(ushort x, ushort y, byte color, string text, bool outlined)
        {
            int str = 0;
            ushort xs = x;
            while (str < text.Length && x < SCREEN_W)
            {
                var ch = text[str++];
                var ftch = ch * 8;
                if (outlined)
                {
                    for (int i = 0; i < 8; ++i)
                    {
                        DrawChar((ushort)(x + dx[i]), (ushort)(y + dy[i]), GetInkColor(InkColor.INK_OUTLINED_TEXT), _font, ftch);
                    }
                }
                DrawChar(x, y, color, _font, ftch);
                x += _charWidth[ch];
            }
            SetDirtyBlock((ushort)(xs - 1), (ushort)(y - 1), (ushort)(x - xs + 2), 8 + 2);
        }

        private void DrawChar(ushort x, ushort y, byte color, byte[] chr, int offs)
        {
            var dstBuf = _screenBuf;
            int d = SCREEN_W * y + x;
            for (int j = 0; j < 8; ++j)
            {
                var p = dstBuf;
                int pOffs = d;
                if (offs < chr.Length)
                {
                    var c = chr[offs++];
                    for (int i = 0; i < 8; ++i)
                    {
                        if ((c & 0x80) != 0)
                        {
                            p[pOffs] = color;
                        }
                        ++pOffs;
                        c <<= 1;
                    }
                }
                d += SCREEN_W;
            }
        }

        /// <summary>
        /// Scroll some palette colors.
        /// </summary>
        /// <returns>The scroll.</returns>
        /// <param name="start">Start.</param>
        /// <param name="end">End.</param>
        private void PalScroll(int start, int end)
        {
            D.Debug(9, $"Display::palScroll({start}, {end})");

            var pal = _pal.screen;

            var c = pal[end];

            int n = (end - start);
            while ((n--) != 0)
            {
                pal[end] = pal[end - 1];
                --end;
            }

            pal[start] = c;
        }

        private void Blit(byte[] dstBuf, ushort dstPitch, ushort x, ushort y, byte[] srcBuf, int src, ushort srcPitch, ushort w, ushort h, bool xflip, bool masked)
        {
            Debug.Assert(w <= dstPitch);
            var dst = dstPitch * y + x;

            if (!masked)
            { // Unmasked always unflipped
                while ((h--) != 0)
                {
                    Array.Copy(srcBuf, src, dstBuf, dst, w);
                    src += srcPitch;
                    dst += dstPitch;
                }
            }
            else if (!xflip)
            { // Masked bitmap unflipped
                while ((h--) != 0)
                {
                    for (int i = 0; i < w; ++i)
                    {
                        byte b = srcBuf[src + i];
                        if (b != 0)
                        {
                            dstBuf[dst + i] = b;
                        }
                    }
                    src += srcPitch;
                    dst += dstPitch;
                }
            }
            else
            { // Masked bitmap flipped
                while ((h--) != 0)
                {
                    for (int i = 0; i < w; ++i)
                    {
                        byte b = srcBuf[src + i];
                        if (b != 0)
                        {
                            dstBuf[dst - i] = b;
                        }
                    }
                    src += srcPitch;
                    dst += dstPitch;
                }
            }
        }

        private void Fill(byte[] dstBuf, ushort dstPitch, ushort x, ushort y, ushort w, ushort h, byte color)
        {
            Debug.Assert(w <= dstPitch);
            var d = dstPitch * y + x;
            while ((h--) != 0)
            {
                dstBuf.Set(d, color, w);
                d += dstPitch;
            }
        }

        /// <summary>
        /// Update the palette.
        /// </summary>
        /// <param name="pal">Palette</param>
        /// <param name="start">Start.</param>
        /// <param name="end">End.</param>
        /// <param name="updateScreen">If set to <c>true</c> update screen.</param>
        private void PalSet(Color[] pal, int start, int end, bool updateScreen = false)
        {
            D.Debug(9, $"Display::palSet({start}, {end})");
            int numColors = end - start + 1;
            Debug.Assert(numColors <= 256);
            _system.GraphicsManager.SetPalette(pal, start, numColors);
            if (updateScreen)
            {
                _vm.Input.Delay(20);
            }
        }

        /// <summary>
        /// Gets the number of colors used by the room.
        /// </summary>
        /// <returns>The number colors for room.</returns>
        /// <param name="room">Room.</param>
        private int GetNumColorsForRoom(ushort room)
        {
            int n = 224;
            if (room >= 114 && room <= 125)
            {
                n = 256;
            }
            return n;
        }

        /// <summary>
        /// Gets true if we shouldn't fade the palette in the specified room.
        /// </summary>
        /// <returns>The pal fading disabled.</returns>
        /// <param name="room">Room.</param>
        private bool IsPalFadingDisabled(ushort room)
        {
            // introduction rooms don't fade palette
            return (room >= 90 && room <= 94) || (room >= 115 && room <= 125);
        }

        /// <summary>
        /// Custom palette effect for the specified room.
        /// </summary>
        /// <returns>The custom colors.</returns>
        /// <param name="roomNum">Room number.</param>
        private void PalCustomColors(ushort roomNum)
        {
            D.Debug(9, $"Display::palCustomColors({roomNum})");
            if (_vm.Resource.Platform == Platform.Amiga)
            {
                switch (roomNum)
                {
                    case 28:
                        PalSetAmigaColor(27, 0xC60);
                        PalSetAmigaColor(28, 0xA30);
                        PalSetAmigaColor(29, 0x810);
                        PalSetAmigaColor(30, 0x600);
                        break;
                    case 29:
                        PalSetAmigaColor(27, 0x58B);
                        PalSetAmigaColor(28, 0x369);
                        PalSetAmigaColor(29, 0x158);
                        PalSetAmigaColor(30, 0x046);
                        break;
                    case 30:
                        PalSetAmigaColor(27, 0x5A4);
                        PalSetAmigaColor(28, 0x384);
                        PalSetAmigaColor(29, 0x171);
                        PalSetAmigaColor(30, 0x056);
                        break;
                    case 31:
                        PalSetAmigaColor(27, 0xDA4);
                        PalSetAmigaColor(28, 0xB83);
                        PalSetAmigaColor(29, 0x873);
                        PalSetAmigaColor(30, 0x652);
                        break;
                    case 45:
                        PalSetAmigaColor(20, 0xA58);
                        PalSetAmigaColor(21, 0x845);
                        break;
                }
                return;
            }
            switch (roomNum)
            {
                case 31:
                    for (int i = 72; i < 84; i++)
                    {
                        _pal.room[i] = Color.FromRgb(_pal.room[i].R,
                            _pal.room[i].G * 90 / 100,
                            _pal.room[i].B * 70 / 100);
                    }
                    break;
                case 29:
                    for (int i = 72; i < 84; i++)
                    {
                        _pal.room[i] = Color.FromRgb(_pal.room[i].R,
                            _pal.room[i].G * 60 / 100,
                            _pal.room[i].B * 60 / 100);
                    }
                    break;
                case 30:
                    for (int i = 72; i < 84; i++)
                    {
                        _pal.room[i] = Color.FromRgb(_pal.room[i].R * 60 / 100,
                            _pal.room[i].G * 80 / 100,
                            _pal.room[i].B);
                    }
                    break;
                case 28:
                    for (int i = 72; i < 84; i++)
                    {
                        _pal.room[i] = Color.FromRgb(_pal.room[i].R * 80 / 100,
                            _pal.room[i].G,
                            _pal.room[i].G * 60 / 100);
                    }
                    break;
            }
        }

        private void PalSetAmigaColor(byte color, ushort rgb)
        {
            byte b = (byte)(rgb & 0xF); rgb >>= 4;
            byte g = (byte)(rgb & 0xF); rgb >>= 4;
            byte r = (byte)(rgb & 0xF);
            _pal.room[color] = Color.FromRgb((r << 4) | r, (g << 4) | g, (b << 4) | b);
        }

        /// <summary>
        /// Initialize dynalum for the specified room.
        /// </summary>
        /// <returns>The init.</returns>
        /// <param name="roomName">Room name.</param>
        /// <param name="roomNum">Room number.</param>
        private void DynalumInit(string roomName, ushort roomNum)
        {
            D.Debug(9, $"Display::dynalumInit({roomName}, {roomNum})");

            _dynalum.valid = false;
            _dynalum.mskBuf = null;
            _dynalum.lumBuf = null;

            if (!IsPalFadingDisabled(roomNum))
            {
                string filename = $"{roomName}.MSK";
                if (_vm.Resource.FileExists(filename))
                {
                    _dynalum.mskBuf = _vm.Resource.LoadFile(filename, 0, out _dynalum.mskSize);
                    filename = "{roomName}.LUM";
                    if (_vm.Resource.FileExists(filename))
                    {
                        _dynalum.lumBuf = _vm.Resource.LoadFile(filename, 0, out _dynalum.lumSize);
                        _dynalum.valid = true;
                        _dynalum.prevColMask = 0xFF;
                    }
                }
            }
        }

        /// <summary>
        /// Decode IFF picture data.
        /// </summary>
        /// <returns>The iff.</returns>
        /// <param name="src">Source.</param>
        /// <param name="srcSize">Source size.</param>
        /// <param name="dst">Dst.</param>
        /// <param name="dstPitch">Dst pitch.</param>
        /// <param name="w">The width.</param>
        /// <param name="h">The height.</param>
        /// <param name="pal">Pal.</param>
        /// <param name="palStart">Pal start.</param>
        /// <param name="palEnd">Pal end.</param>
        /// <param name="colorBase">Color base.</param>
        private void DecodeIFF(byte[] src, uint srcSize, byte[] dst, ushort dstPitch, out ushort w, out ushort h, Color[] pal, ushort palStart, ushort palEnd, byte colorBase = 0)
        {
            using (var str = new MemoryStream(src, 0, (int)srcSize))
            {
                IFFDecoder iff = new IFFDecoder();
                if (!iff.LoadStream(str))
                    throw new InvalidOperationException("Error while reading IFF image");

                Surface iffSurface = iff.Surface;
                w = (ushort)iffSurface.Width;
                h = (ushort)iffSurface.Height;

                Debug.Assert(palStart <= palEnd && palEnd <= 256);
                Array.Copy(iff.Palette, palStart, pal, 0, (palEnd - palStart));
                for (ushort y = 0; y < iffSurface.Height; y++)
                    for (ushort x = 0; x < iffSurface.Width; x++)
                        dst[(y * dstPitch) + x] = (byte)(iffSurface.Pixels[x + y * iffSurface.Pitch] + colorBase);
            }
        }

        /// <summary>
        /// Decode PCX picture data.
        /// </summary>
        /// <returns>The pcx.</returns>
        /// <param name="src">Source.</param>
        /// <param name="srcSize">Source size.</param>
        /// <param name="dst">Dst.</param>
        /// <param name="dstPos">Dst position.</param>
        /// <param name="dstPitch">Dst pitch.</param>
        /// <param name="w">The width.</param>
        /// <param name="h">The height.</param>
        /// <param name="pal">Pal.</param>
        /// <param name="palStart">Pal start.</param>
        /// <param name="palEnd">Pal end.</param>
        private void DecodePCX(byte[] src, uint srcSize, byte[] dst, int dstPos, ushort dstPitch, out ushort w, out ushort h, Color[] pal, ushort palStart, ushort palEnd)
        {
            using (var str = new MemoryStream(src, 0, (int)srcSize))
            {
                var pcx = new PCXDecoder();
                if (!pcx.LoadStream(str))
                    throw new InvalidOperationException("Error while reading PCX image");

                var pcxSurface = pcx.Surface;
                if (pcxSurface.BytesPerPixel != 1)
                    throw new InvalidOperationException($"Invalid bytes per pixel in PCX surface ({pcxSurface.BytesPerPixel})");
                w = (ushort)pcxSurface.Width;
                h = (ushort)pcxSurface.Height;

                Debug.Assert(palStart <= palEnd && palEnd <= 256);
                Array.Copy(pcx.Palette, palStart, pal, 0, (palEnd - palStart));
                for (var y = 0; y < pcxSurface.Height; y++)
                    Array.Copy(pcxSurface.Pixels, y * pcxSurface.Pitch, dst, dstPos + y * dstPitch, pcxSurface.Width);
            }
        }

        /// <summary>
        /// Initialize font, compute justification sizes.
        /// </summary>
        /// <returns>The font.</returns>
        private void InitFont()
        {
            switch (_vm.Resource.Language)
            {
                case Language.HE_ISR:
                    _font = _fontHebrew;
                    break;
                case Language.RU_RUS:
                    _font = _fontRussian;
                    break;
                case Language.GR_GRE:
                    _font = _fontGreek;
                    break;
                default:
                    _font = _fontRegular;
                    break;
            }
            // calculate font justification sizes
            for (int i = 0; i < 256; ++i)
            {
                _charWidth[i] = 0;
                for (int y = 0; y < 8; ++y)
                {
                    byte c = _font[i * 8 + y];
                    for (int x = 0; x < 8; ++x)
                    {
                        if (((c & (0x80 >> x)) != 0) && (x > _charWidth[i]))
                        {
                            _charWidth[i] = (byte)x;
                        }
                    }
                }
                _charWidth[i] += 2;
            }
            _charWidth[0x20] = 4;
            --_charWidth[0x5E];
        }

        private void SetupInkColors()
        {
            _inkColors = new byte[(int)InkColor.INK_COUNT];
            if (_vm.Resource.Platform == Platform.Amiga)
            {
                _inkColors[(int)InkColor.INK_BG_PANEL] = 144 + 2;
                _inkColors[(int)InkColor.INK_JOURNAL] = 144 + 16;
                _inkColors[(int)InkColor.INK_PINNACLE_ROOM] = 144 + 14;
                _inkColors[(int)InkColor.INK_CMD_SELECT] = 144 + 17;
                _inkColors[(int)InkColor.INK_CMD_NORMAL] = 144 + 1;
                _inkColors[(int)InkColor.INK_TALK_NORMAL] = 144 + 1;
                _inkColors[(int)InkColor.INK_JOE] = 144 + 17;
                _inkColors[(int)InkColor.INK_OUTLINED_TEXT] = 0;
            }
            else
            {
                _inkColors[(int)InkColor.INK_BG_PANEL] = 226;
                _inkColors[(int)InkColor.INK_JOURNAL] = 248;
                _inkColors[(int)InkColor.INK_PINNACLE_ROOM] = 243;
                _inkColors[(int)InkColor.INK_CMD_SELECT] = 255;
                _inkColors[(int)InkColor.INK_CMD_NORMAL] = 225;
                _inkColors[(int)InkColor.INK_TALK_NORMAL] = 7;
                _inkColors[(int)InkColor.INK_JOE] = 14;
                _inkColors[(int)InkColor.INK_OUTLINED_TEXT] = 16;
            }
        }

        private static readonly byte[] _fontRegular = {
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0xC0, 0xC0, 0x00,
            0xD8, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00,
            0x30, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x30, 0x00, 0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00,
            0x38, 0x6C, 0x68, 0x36, 0xDC, 0xCC, 0x76, 0x00, 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x30, 0x60, 0xC0, 0xC0, 0xC0, 0x60, 0x30, 0x00, 0xC0, 0x60, 0x30, 0x30, 0x30, 0x60, 0xC0, 0x00,
            0x00, 0x6C, 0x38, 0xFE, 0x38, 0x6C, 0x00, 0x00, 0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x00,
            0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x30, 0x70, 0xF0, 0x30, 0x30, 0x30, 0x30, 0x00,
            0x78, 0xCC, 0x0C, 0x78, 0xC0, 0xC0, 0xFC, 0x00, 0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00,
            0x1C, 0x3C, 0x6C, 0xCC, 0xFC, 0x0C, 0x0C, 0x00, 0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00,
            0x78, 0xCC, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00, 0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00,
            0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00, 0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0xCC, 0x78, 0x00,
            0x00, 0xC0, 0xC0, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x60, 0x60, 0xC0,
            0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00, 0x00, 0x00, 0xFC, 0x00, 0xFC, 0x00, 0x00, 0x00,
            0xC0, 0x60, 0x30, 0x18, 0x30, 0x60, 0xC0, 0x00, 0x78, 0xCC, 0x0C, 0x18, 0x30, 0x00, 0x30, 0x00,
            0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x38, 0x7C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0x00,
            0xF8, 0xCC, 0xCC, 0xF8, 0xCC, 0xCC, 0xF8, 0x00, 0x78, 0xCC, 0xC0, 0xC0, 0xC0, 0xCC, 0x78, 0x00,
            0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF8, 0x00, 0xFC, 0xC0, 0xC0, 0xF0, 0xC0, 0xC0, 0xFC, 0x00,
            0xFC, 0xC0, 0xC0, 0xF0, 0xC0, 0xC0, 0xC0, 0x00, 0x78, 0xCC, 0xC0, 0xDC, 0xCC, 0xCC, 0x7C, 0x00,
            0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00, 0xF0, 0x60, 0x60, 0x60, 0x60, 0x60, 0xF0, 0x00,
            0x0C, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00, 0xC6, 0xCC, 0xD8, 0xF8, 0xD8, 0xCC, 0xC6, 0x00,
            0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFC, 0x00, 0x82, 0xC6, 0xEE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00,
            0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
            0xF8, 0xCC, 0xCC, 0xF8, 0xC0, 0xC0, 0xC0, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0xDC, 0x78, 0x0C,
            0xF8, 0xCC, 0xCC, 0xF8, 0xD8, 0xCC, 0xCC, 0x00, 0x78, 0xCC, 0xC0, 0x78, 0x0C, 0xCC, 0x78, 0x00,
            0xFC, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x00,
            0xC6, 0xC6, 0x6C, 0x6C, 0x38, 0x38, 0x10, 0x00, 0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00,
            0xC6, 0x6C, 0x38, 0x10, 0x38, 0x6C, 0xC6, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x30, 0x00,
            0xFC, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0xFC, 0x00, 0xF0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xF0, 0x00,
            0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x00, 0xF0, 0x30, 0x30, 0x30, 0x30, 0x30, 0xF0, 0x00,
            0xE8, 0x4D, 0x4A, 0x48, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
            0xC0, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x7C, 0x00,
            0xC0, 0xC0, 0xF8, 0xCC, 0xCC, 0xCC, 0xF8, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00,
            0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x7C, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
            0x38, 0x6C, 0x60, 0xF8, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x7C, 0xCC, 0xCC, 0x7C, 0x0C, 0x78,
            0xC0, 0xC0, 0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0xC0, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00,
            0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0xCC, 0x78, 0xC0, 0xC0, 0xCC, 0xD8, 0xF0, 0xD8, 0xCC, 0x00,
            0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xCC, 0xEE, 0xD6, 0xC6, 0xC6, 0x00,
            0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
            0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xF8, 0xC0, 0xC0, 0x00, 0x00, 0x7C, 0xCC, 0xCC, 0x7C, 0x0C, 0x0C,
            0x00, 0x00, 0xF8, 0xCC, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x7C, 0xC0, 0x78, 0x0C, 0x78, 0x00,
            0x30, 0x30, 0xFC, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x00,
            0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00, 0x00, 0x00, 0xC6, 0xD6, 0xD6, 0x6C, 0x6C, 0x00,
            0x00, 0x00, 0xCC, 0x78, 0x30, 0x78, 0xCC, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0xE0,
            0x00, 0x00, 0xFC, 0x18, 0x30, 0x60, 0xFC, 0x00, 0x38, 0x60, 0x60, 0xC0, 0x60, 0x60, 0x38, 0x00,
            0xC0, 0xC0, 0xC0, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0xE0, 0x30, 0x30, 0x18, 0x30, 0x30, 0xE0, 0x00,
            0x38, 0x44, 0xBA, 0xAA, 0xBA, 0x44, 0x38, 0x00, 0x00, 0x98, 0x30, 0x60, 0xC8, 0x98, 0x30, 0x00,
            0x1E, 0x30, 0x60, 0x60, 0x30, 0x1E, 0x0C, 0x18, 0x00, 0x66, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x00,
            0x0C, 0x18, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00, 0x18, 0x66, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x30, 0x60, 0x60, 0x30, 0x1E, 0x0C, 0x18,
            0x18, 0x66, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00, 0x66, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00,
            0x30, 0x18, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00, 0x00, 0x66, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
            0x18, 0x66, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x30, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x18, 0x30, 0xFC, 0xC0, 0xF0, 0xC0, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x66, 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x00,
            0x00, 0x66, 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x00, 0x30, 0x18, 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x00,
            0x18, 0x66, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x00, 0x30, 0x18, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x18, 0x30, 0x78, 0x0C, 0x7C, 0xCC, 0x7C, 0x00, 0x0C, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
            0x18, 0x30, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00, 0x18, 0x30, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x00,
            0x71, 0x8E, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x00, 0x71, 0xCE, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0x00,
            0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00, 0x3C, 0x60, 0x3C, 0x66, 0x3C, 0x06, 0x3C, 0x00,
            0x18, 0x00, 0x18, 0x30, 0x60, 0x66, 0x3C, 0x00, 0x3F, 0x40, 0x4E, 0x58, 0x4E, 0x40, 0x3F, 0x00,
            0x1C, 0xA4, 0xC4, 0xBC, 0x80, 0xFE, 0x00, 0x00, 0x00, 0x33, 0x66, 0xCC, 0x66, 0x33, 0x00, 0x00,
            0x3E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0x00,
            0x81, 0xB9, 0xA5, 0xB9, 0xA5, 0x81, 0x7E, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x78, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0xFC, 0x00,
            0xF0, 0x18, 0x30, 0x60, 0xF8, 0x00, 0x00, 0x00, 0xF0, 0x18, 0x30, 0x18, 0xF0, 0x00, 0x00, 0x00,
            0x30, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xFE, 0xC0,
            0x3E, 0x7A, 0x7A, 0x3A, 0x0A, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0x60, 0xE0, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00,
            0x38, 0x44, 0x44, 0x38, 0x00, 0x7C, 0x00, 0x00, 0x00, 0xCC, 0x66, 0x33, 0x66, 0xCC, 0x00, 0x00,
            0x40, 0xC6, 0x4C, 0x58, 0x32, 0x66, 0xCF, 0x02, 0x40, 0xC6, 0x4C, 0x58, 0x3E, 0x62, 0xC4, 0x0E,
            0xC0, 0x23, 0x66, 0x2C, 0xD9, 0x33, 0x67, 0x01, 0x18, 0x00, 0x18, 0x30, 0x60, 0x66, 0x3C, 0x00,
            0x60, 0x30, 0x7C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00, 0x0C, 0x18, 0x7C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00,
            0x38, 0xC6, 0x7C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00, 0x71, 0x8E, 0x7C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00,
            0x6C, 0x00, 0x7C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00, 0x38, 0x44, 0x7C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00,
            0x1F, 0x3C, 0x3C, 0x6F, 0x7C, 0xCC, 0xCF, 0x00, 0x1E, 0x30, 0x60, 0x60, 0x30, 0x1E, 0x0C, 0x18,
            0x60, 0x30, 0xFC, 0xC0, 0xF0, 0xC0, 0xFC, 0x00, 0x18, 0x30, 0xFC, 0xC0, 0xF0, 0xC0, 0xFC, 0x00,
            0x30, 0xCC, 0xFC, 0xC0, 0xF0, 0xC0, 0xFC, 0x00, 0xCC, 0x00, 0xFC, 0xC0, 0xF0, 0xC0, 0xFC, 0x00,
            0x60, 0x30, 0x78, 0x30, 0x30, 0x30, 0x78, 0x00, 0x18, 0x30, 0x78, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x30, 0xCC, 0x78, 0x30, 0x30, 0x30, 0x78, 0x00, 0xCC, 0x00, 0x78, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x78, 0x6C, 0x66, 0xF6, 0x66, 0x6C, 0x78, 0x00, 0x71, 0xCE, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0x00,
            0x30, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x0C, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00,
            0x18, 0x66, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x71, 0x8E, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00,
            0xC3, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00, 0x00,
            0x3F, 0x66, 0x6E, 0x7E, 0x76, 0x66, 0xFC, 0x00, 0x30, 0x18, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00,
            0x0C, 0x18, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00, 0x18, 0x24, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00,
            0x66, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00, 0x06, 0x08, 0xC3, 0x66, 0x3C, 0x18, 0x18, 0x00,
            0x60, 0x60, 0x7E, 0x63, 0x7E, 0x60, 0x60, 0x00, 0x3C, 0x66, 0x66, 0x6C, 0x66, 0x66, 0x6C, 0x60,
            0x30, 0x18, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00, 0x0C, 0x18, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00,
            0x18, 0x66, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00, 0x71, 0x8E, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00,
            0x66, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00, 0x18, 0x24, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00,
            0x00, 0x00, 0x7E, 0x1B, 0x7F, 0xD8, 0x77, 0x00, 0x00, 0x00, 0x3C, 0x60, 0x60, 0x60, 0x3C, 0x18,
            0x30, 0x18, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00, 0x0C, 0x18, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00,
            0x18, 0x66, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00, 0x66, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00,
            0x30, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x0C, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
            0x18, 0x66, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x66, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
            0x60, 0xFC, 0x18, 0x3C, 0x66, 0x66, 0x3C, 0x00, 0x71, 0x8E, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x00,
            0x30, 0x18, 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x00, 0x0C, 0x18, 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x00,
            0x18, 0x66, 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x00, 0x71, 0x8E, 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x00,
            0x00, 0x66, 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x18, 0x00, 0x7E, 0x00, 0x18, 0x00, 0x00,
            0x00, 0x02, 0x7C, 0xCE, 0xD6, 0xE6, 0x7C, 0x80, 0x30, 0x18, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x00,
            0x0C, 0x18, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x00, 0x18, 0x66, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x00,
            0x00, 0x66, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x00, 0x0C, 0x18, 0x00, 0x66, 0x66, 0x3C, 0x18, 0x30,
            0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x00, 0x66, 0x00, 0x66, 0x66, 0x3C, 0x18, 0x30
        };

        private static readonly byte[] _fontGreek = {
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0xC0, 0xC0, 0x00,
            0xD8, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00,
            0x30, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x30, 0x00, 0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00,
            0x38, 0x6C, 0x68, 0x36, 0xDC, 0xCC, 0x76, 0x00, 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x30, 0x60, 0xC0, 0xC0, 0xC0, 0x60, 0x30, 0x00, 0xC0, 0x60, 0x30, 0x30, 0x30, 0x60, 0xC0, 0x00,
            0x00, 0x6C, 0x38, 0xFE, 0x38, 0x6C, 0x00, 0x00, 0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x00,
            0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x30, 0x70, 0xF0, 0x30, 0x30, 0x30, 0x30, 0x00,
            0x78, 0xCC, 0x0C, 0x78, 0xC0, 0xC0, 0xFC, 0x00, 0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00,
            0x1C, 0x3C, 0x6C, 0xCC, 0xFC, 0x0C, 0x0C, 0x00, 0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00,
            0x78, 0xCC, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00, 0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00,
            0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00, 0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0xCC, 0x78, 0x00,
            0x00, 0xC0, 0xC0, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x60, 0x60, 0xC0,
            0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00, 0x00, 0x00, 0xFC, 0x00, 0xFC, 0x00, 0x00, 0x00,
            0xC0, 0x60, 0x30, 0x18, 0x30, 0x60, 0xC0, 0x00, 0x78, 0xCC, 0x0C, 0x18, 0x30, 0x00, 0x30, 0x00,
            0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x38, 0x7C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0x00,
            0xF8, 0xCC, 0xCC, 0xF8, 0xCC, 0xCC, 0xF8, 0x00, 0x78, 0xCC, 0xC0, 0xC0, 0xC0, 0xCC, 0x78, 0x00,
            0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF8, 0x00, 0xFC, 0xC0, 0xC0, 0xF0, 0xC0, 0xC0, 0xFC, 0x00,
            0xFC, 0xC0, 0xC0, 0xF0, 0xC0, 0xC0, 0xC0, 0x00, 0x78, 0xCC, 0xC0, 0xDC, 0xCC, 0xCC, 0x7C, 0x00,
            0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00, 0xF0, 0x60, 0x60, 0x60, 0x60, 0x60, 0xF0, 0x00,
            0x0C, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00, 0xC6, 0xCC, 0xD8, 0xF8, 0xD8, 0xCC, 0xC6, 0x00,
            0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFC, 0x00, 0x82, 0xC6, 0xEE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00,
            0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
            0xF8, 0xCC, 0xCC, 0xF8, 0xC0, 0xC0, 0xC0, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0xDC, 0x78, 0x0C,
            0xF8, 0xCC, 0xCC, 0xF8, 0xD8, 0xCC, 0xCC, 0x00, 0x78, 0xCC, 0xC0, 0x78, 0x0C, 0xCC, 0x78, 0x00,
            0xFC, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x00,
            0xC6, 0xC6, 0x6C, 0x6C, 0x38, 0x38, 0x10, 0x00, 0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00,
            0xC6, 0x6C, 0x38, 0x10, 0x38, 0x6C, 0xC6, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x30, 0x00,
            0xFC, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0xFC, 0x00, 0xF0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xF0, 0x00,
            0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x00, 0xF0, 0x30, 0x30, 0x30, 0x30, 0x30, 0xF0, 0x00,
            0xE8, 0x4D, 0x4A, 0x48, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
            0xC0, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x7C, 0x00,
            0xC0, 0xC0, 0xF8, 0xCC, 0xCC, 0xCC, 0xF8, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00,
            0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x7C, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
            0x38, 0x6C, 0x60, 0xF8, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x7C, 0xCC, 0xCC, 0x7C, 0x0C, 0x78,
            0xC0, 0xC0, 0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0xC0, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00,
            0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0xCC, 0x78, 0xC0, 0xC0, 0xCC, 0xD8, 0xF0, 0xD8, 0xCC, 0x00,
            0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xCC, 0xEE, 0xD6, 0xC6, 0xC6, 0x00,
            0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
            0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xF8, 0xC0, 0xC0, 0x00, 0x00, 0x7C, 0xCC, 0xCC, 0x7C, 0x0C, 0x0C,
            0x00, 0x00, 0xF8, 0xCC, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x7C, 0xC0, 0x78, 0x0C, 0x78, 0x00,
            0x30, 0x30, 0xFC, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x00,
            0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00, 0x00, 0x00, 0xC6, 0xD6, 0xD6, 0x6C, 0x6C, 0x00,
            0x00, 0x00, 0xCC, 0x78, 0x30, 0x78, 0xCC, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0xE0,
            0x00, 0x00, 0xFC, 0x18, 0x30, 0x60, 0xFC, 0x00, 0x38, 0x60, 0x60, 0xC0, 0x60, 0x60, 0x38, 0x00,
            0xC0, 0xC0, 0xC0, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0xE0, 0x30, 0x30, 0x18, 0x30, 0x30, 0xE0, 0x00,
            0x38, 0x44, 0xBA, 0xAA, 0xBA, 0x44, 0x38, 0x00, 0x00, 0x98, 0x30, 0x60, 0xC8, 0x98, 0x30, 0x00,
            0x38, 0x64, 0xF0, 0x60, 0xF0, 0x64, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x9C, 0xBE, 0x63, 0x63, 0x7F, 0x63, 0x63, 0x00, 0x38, 0x6C, 0x60, 0xF0, 0x60, 0x60, 0xFC, 0x00,
            0x42, 0x3C, 0x66, 0x3C, 0x42, 0x00, 0x00, 0x00, 0xC3, 0x66, 0x3C, 0x18, 0x3C, 0x18, 0x18, 0x00,
            0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00, 0x3C, 0x60, 0x3C, 0x66, 0x3C, 0x06, 0x3C, 0x00,
            0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x3F, 0x40, 0x4E, 0x58, 0x4E, 0x40, 0x3F, 0x00,
            0x1C, 0xA4, 0xC4, 0xBC, 0x80, 0xFE, 0x00, 0x00, 0x00, 0x33, 0x66, 0xCC, 0x66, 0x33, 0x00, 0x00,
            0x3E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00,
            0x81, 0xB9, 0xA5, 0xB9, 0xA5, 0x81, 0x7E, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x78, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0xFC, 0x00,
            0xF0, 0x18, 0x30, 0x60, 0xF8, 0x00, 0x00, 0x00, 0xF0, 0x18, 0x30, 0x18, 0xF0, 0x00, 0x00, 0x00,
            0x30, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xFE, 0xC0,
            0x3E, 0x7A, 0x7A, 0x3A, 0x0A, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
            0xBF, 0xB0, 0x30, 0x3C, 0x30, 0x30, 0x3F, 0x00, 0xB3, 0xB3, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00,
            0xBC, 0x98, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0xCC, 0x66, 0x33, 0x66, 0xCC, 0x00, 0x00,
            0x9E, 0xB3, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x00, 0x40, 0xC6, 0x4C, 0x58, 0x3E, 0x62, 0xC4, 0x0E,
            0xB3, 0xB3, 0x33, 0x1E, 0x0C, 0x0C, 0x0C, 0x00, 0x9E, 0xB3, 0x33, 0x33, 0x1E, 0x00, 0x3F, 0x00,
            0xB4, 0x00, 0x30, 0x30, 0x30, 0x30, 0x18, 0x00, 0x38, 0x7C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0x00,
            0xF8, 0xCC, 0xCC, 0xF8, 0xCC, 0xCC, 0xF8, 0x00, 0xFC, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00,
            0x38, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xFE, 0x00, 0xFC, 0xC0, 0xC0, 0xF0, 0xC0, 0xC0, 0xFC, 0x00,
            0xFC, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0xFC, 0x00, 0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00,
            0x78, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0x78, 0x00, 0xF0, 0x60, 0x60, 0x60, 0x60, 0x60, 0xF0, 0x00,
            0xC6, 0xCC, 0xD8, 0xF8, 0xD8, 0xCC, 0xC6, 0x00, 0x38, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00,
            0x82, 0xC6, 0xEE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00, 0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00,
            0xFC, 0xFC, 0x00, 0x78, 0x00, 0xFC, 0xFC, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
            0xFC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0xF8, 0xCC, 0xCC, 0xF8, 0xC0, 0xC0, 0xC0, 0x00,
            0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00, 0xFC, 0x60, 0x30, 0x18, 0x30, 0x60, 0xFC, 0x00,
            0xFC, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x30, 0x00,
            0x10, 0x7C, 0xD6, 0xD6, 0xD6, 0x7C, 0x10, 0x00, 0xC6, 0x6C, 0x38, 0x10, 0x38, 0x6C, 0xC6, 0x00,
            0xC6, 0xD6, 0xD6, 0xD6, 0x7C, 0x10, 0x10, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0xFC, 0x00,
            0xBD, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0xB4, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x30, 0x00,
            0x30, 0x00, 0x7A, 0xCC, 0xCC, 0xCC, 0x7A, 0x00, 0x30, 0x00, 0x78, 0xCC, 0x60, 0xCC, 0x78, 0x00,
            0x30, 0x00, 0xB8, 0xEC, 0xCC, 0xCC, 0xCC, 0x0C, 0xC0, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0x60, 0x00,
            0xB4, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x7A, 0xCC, 0xCC, 0xCC, 0x7A, 0x00,
            0x70, 0xD8, 0xD8, 0xF0, 0xD8, 0xD8, 0xF0, 0xC0, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30,
            0xF8, 0x60, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x78, 0xCC, 0x60, 0xCC, 0x78, 0x00,
            0xF8, 0x18, 0x30, 0x60, 0x60, 0x30, 0x18, 0x30, 0x00, 0x00, 0xB8, 0xEC, 0xCC, 0xCC, 0xCC, 0x0C,
            0x70, 0xD8, 0xD8, 0xF8, 0xD8, 0xD8, 0x70, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0x60, 0x00,
            0x00, 0x00, 0xCC, 0xD8, 0xF0, 0xD8, 0xCC, 0x00, 0xF0, 0x18, 0x3C, 0x6C, 0xCC, 0xCC, 0xCC, 0x00,
            0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xFA, 0xC0, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00,
            0xF8, 0x18, 0x30, 0x18, 0x30, 0x18, 0x08, 0x10, 0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
            0x00, 0x00, 0xFC, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0xF8, 0xC0,
            0x00, 0x00, 0x7C, 0xE0, 0x78, 0x1C, 0xF8, 0x00, 0x00, 0x00, 0x7E, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
            0x00, 0x00, 0xFC, 0x30, 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
            0x00, 0x00, 0x4C, 0xD6, 0xD6, 0xD6, 0x7C, 0x10, 0x00, 0x00, 0xCC, 0xCC, 0x30, 0x30, 0xCC, 0xCC,
            0x00, 0x00, 0x54, 0xD6, 0xD6, 0xD6, 0x7C, 0x10, 0x00, 0x00, 0x6C, 0xC6, 0xD6, 0xFE, 0x6C, 0x00,
            0x90, 0x00, 0x60, 0x60, 0x60, 0x60, 0x30, 0x00, 0x48, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
            0x30, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x30, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
            0x18, 0x00, 0x6C, 0xC6, 0xD6, 0xFE, 0x6C, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00
        };


        private static readonly byte[] _fontHebrew = {
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00, 0xF8, 0xB0, 0xB0, 0x80, 0xB0, 0xB0, 0xC0, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0xC0, 0xC0, 0x00,
            0xD8, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00,
            0x30, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x30, 0x00, 0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00,
            0x38, 0x6C, 0x68, 0x36, 0xDC, 0xCC, 0x76, 0x00, 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x30, 0x60, 0xC0, 0xC0, 0xC0, 0x60, 0x30, 0x00, 0xC0, 0x60, 0x30, 0x30, 0x30, 0x60, 0xC0, 0x00,
            0x00, 0x6C, 0x38, 0xFE, 0x38, 0x6C, 0x00, 0x00, 0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x00,
            0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x30, 0x70, 0xF0, 0x30, 0x30, 0x30, 0x30, 0x00,
            0x78, 0xCC, 0x0C, 0x78, 0xC0, 0xC0, 0xFC, 0x00, 0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00,
            0x1C, 0x3C, 0x6C, 0xCC, 0xFC, 0x0C, 0x0C, 0x00, 0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00,
            0x78, 0xCC, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00, 0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00,
            0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00, 0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0xCC, 0x78, 0x00,
            0x00, 0xC0, 0xC0, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x60, 0x60, 0xC0,
            0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00, 0x00, 0x00, 0xFC, 0x00, 0xFC, 0x00, 0x00, 0x00,
            0xC0, 0x60, 0x30, 0x18, 0x30, 0x60, 0xC0, 0x00, 0x78, 0xCC, 0x0C, 0x18, 0x30, 0x00, 0x30, 0x00,
            0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x38, 0x7C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0x00,
            0xF8, 0xCC, 0xCC, 0xF8, 0xCC, 0xCC, 0xF8, 0x00, 0x78, 0xCC, 0xC0, 0xC0, 0xC0, 0xCC, 0x78, 0x00,
            0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xF8, 0x00, 0xFC, 0xC0, 0xC0, 0xF0, 0xC0, 0xC0, 0xFC, 0x00,
            0xFC, 0xC0, 0xC0, 0xF0, 0xC0, 0xC0, 0xC0, 0x00, 0x78, 0xCC, 0xC0, 0xDC, 0xCC, 0xCC, 0x7C, 0x00,
            0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00, 0xF0, 0x60, 0x60, 0x60, 0x60, 0x60, 0xF0, 0x00,
            0x0C, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00, 0xC6, 0xCC, 0xD8, 0xF8, 0xD8, 0xCC, 0xC6, 0x00,
            0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFC, 0x00, 0x82, 0xC6, 0xEE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00,
            0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
            0xF8, 0xCC, 0xCC, 0xF8, 0xC0, 0xC0, 0xC0, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0xDC, 0x78, 0x0C,
            0xF8, 0xCC, 0xCC, 0xF8, 0xD8, 0xCC, 0xCC, 0x00, 0x78, 0xCC, 0xC0, 0x78, 0x0C, 0xCC, 0x78, 0x00,
            0xFC, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x00,
            0xC6, 0xC6, 0x6C, 0x6C, 0x38, 0x38, 0x10, 0x00, 0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00,
            0xC6, 0x6C, 0x38, 0x10, 0x38, 0x6C, 0xC6, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x30, 0x00,
            0xFC, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0xFC, 0x00, 0xF0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xF0, 0x00,
            0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x00, 0xF0, 0x30, 0x30, 0x30, 0x30, 0x30, 0xF0, 0x00,
            0xE8, 0x4D, 0x4A, 0x48, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
            0xC0, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x7C, 0x00,
            0xC0, 0xC0, 0xF8, 0xCC, 0xCC, 0xCC, 0xF8, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00,
            0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x7C, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
            0x38, 0x6C, 0x60, 0xF8, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x7C, 0xCC, 0xCC, 0x7C, 0x0C, 0x78,
            0xC0, 0xC0, 0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0xC0, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00,
            0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0xCC, 0x78, 0xC0, 0xC0, 0xCC, 0xD8, 0xF0, 0xD8, 0xCC, 0x00,
            0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xCC, 0xEE, 0xD6, 0xC6, 0xC6, 0x00,
            0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
            0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xF8, 0xC0, 0xC0, 0x00, 0x00, 0x7C, 0xCC, 0xCC, 0x7C, 0x0C, 0x0C,
            0x00, 0x00, 0xF8, 0xCC, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x7C, 0xC0, 0x78, 0x0C, 0x78, 0x00,
            0x30, 0x30, 0xFC, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x00,
            0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00, 0x00, 0x00, 0xC6, 0xD6, 0xD6, 0x6C, 0x6C, 0x00,
            0x00, 0x00, 0xCC, 0x78, 0x30, 0x78, 0xCC, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0xE0,
            0x00, 0x00, 0xFC, 0x18, 0x30, 0x60, 0xFC, 0x00, 0x38, 0x60, 0x60, 0xC0, 0x60, 0x60, 0x38, 0x00,
            0xC0, 0xC0, 0xC0, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0xE0, 0x30, 0x30, 0x18, 0x30, 0x30, 0xE0, 0x00,
            0x38, 0x44, 0xBA, 0xAA, 0xBA, 0x44, 0x38, 0x00, 0x00, 0x98, 0x30, 0x60, 0xC8, 0x98, 0x30, 0x00,
            0xCC, 0x66, 0x76, 0xBC, 0x98, 0x8C, 0xE6, 0x00, 0xFC, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xFE, 0x00,
            0x78, 0x18, 0x18, 0x18, 0x38, 0x78, 0xD8, 0x00, 0xFE, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
            0xFE, 0x06, 0x06, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
            0x7C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0xFE, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00,
            0xDC, 0x66, 0xE6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0xF0, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xFE, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0xF8, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xF8, 0x00,
            0xC0, 0xFE, 0x06, 0x06, 0x0C, 0x18, 0x18, 0x00, 0xFE, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7E, 0x00,
            0xFC, 0x76, 0x66, 0x66, 0x66, 0x66, 0x6E, 0x00, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00, 0xFE, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00,
            0xEE, 0x66, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00, 0xFE, 0xC6, 0xC6, 0xF6, 0x06, 0x06, 0x06, 0x06,
            0xFE, 0xC6, 0xC6, 0xFE, 0x06, 0x06, 0xFE, 0x00, 0xFE, 0x66, 0x6C, 0x78, 0x60, 0x60, 0x60, 0x60,
            0xEE, 0x66, 0x3C, 0x18, 0x0C, 0x06, 0xFE, 0x00, 0xFE, 0x06, 0x0E, 0xD8, 0xF0, 0xF0, 0xC0, 0xC0,
            0xFC, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0xEE, 0xCA, 0xCA, 0xCA, 0xCA, 0xCA, 0x7C, 0x00,
            0xFF, 0x67, 0x67, 0x67, 0x67, 0x67, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
            0x00, 0x0C, 0x3E, 0x6C, 0x3E, 0x0C, 0x00, 0x00, 0x38, 0x6C, 0x60, 0xF0, 0x60, 0x60, 0xFC, 0x00,
            0x42, 0x3C, 0x66, 0x3C, 0x42, 0x00, 0x00, 0x00, 0xC3, 0x66, 0x3C, 0x18, 0x3C, 0x18, 0x18, 0x00,
            0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00, 0x3C, 0x60, 0x3C, 0x66, 0x3C, 0x06, 0x3C, 0x00,
            0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x40, 0x4E, 0x58, 0x4E, 0x40, 0x3F, 0x00,
            0x1C, 0xA4, 0xC4, 0xBC, 0x80, 0xFE, 0x00, 0x00, 0x00, 0x33, 0x66, 0xCC, 0x66, 0x33, 0x00, 0x00,
            0x3E, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00,
            0x81, 0xB9, 0xA5, 0xB9, 0xA5, 0x81, 0x7E, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x78, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0xFC, 0x00,
            0xF0, 0x18, 0x30, 0x60, 0xF8, 0x00, 0x00, 0x00, 0xF0, 0x18, 0x30, 0x18, 0xF0, 0x00, 0x00, 0x00,
            0x30, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xFE, 0xC0,
            0x3E, 0x7A, 0x7A, 0x3A, 0x0A, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0x60, 0xE0, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00,
            0x38, 0x44, 0x44, 0x38, 0x00, 0x7C, 0x00, 0x00, 0x00, 0xCC, 0x66, 0x33, 0x66, 0xCC, 0x00, 0x00,
            0x40, 0xC6, 0x4C, 0x58, 0x32, 0x66, 0xCF, 0x02, 0x40, 0xC6, 0x4C, 0x58, 0x3E, 0x62, 0xC4, 0x0E,
            0xC0, 0x23, 0x66, 0x2C, 0xD9, 0x33, 0x67, 0x01, 0x18, 0x00, 0x18, 0x30, 0x60, 0x66, 0x3C, 0x00,
            0x60, 0x30, 0x7C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00, 0x0C, 0x18, 0x7C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00,
            0x38, 0xC6, 0x7C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00, 0x71, 0x8E, 0x7C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00,
            0x6C, 0x00, 0x7C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00, 0x38, 0x44, 0x7C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00,
            0x1F, 0x3C, 0x3C, 0x6F, 0x7C, 0xCC, 0xCF, 0x00, 0x1E, 0x30, 0x60, 0x60, 0x30, 0x1E, 0x0C, 0x18,
            0x60, 0x30, 0xFC, 0xC0, 0xF0, 0xC0, 0xFC, 0x00, 0x18, 0x30, 0xFC, 0xC0, 0xF0, 0xC0, 0xFC, 0x00,
            0x30, 0xCC, 0xFC, 0xC0, 0xF0, 0xC0, 0xFC, 0x00, 0xCC, 0x00, 0xFC, 0xC0, 0xF0, 0xC0, 0xFC, 0x00,
            0x60, 0x30, 0x78, 0x30, 0x30, 0x30, 0x78, 0x00, 0x18, 0x30, 0x78, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x30, 0xCC, 0x78, 0x30, 0x30, 0x30, 0x78, 0x00, 0xCC, 0x00, 0x78, 0x30, 0x30, 0x30, 0x78, 0x00,
            0x78, 0x6C, 0x66, 0xF6, 0x66, 0x6C, 0x78, 0x00, 0x71, 0xCE, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0x00,
            0x30, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x0C, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00,
            0x18, 0x66, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x71, 0x8E, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00,
            0xC3, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00, 0x00,
            0x3F, 0x66, 0x6E, 0x7E, 0x76, 0x66, 0xFC, 0x00, 0x30, 0x18, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00,
            0x0C, 0x18, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00, 0x18, 0x24, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00,
            0x66, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00, 0x06, 0x08, 0xC3, 0x66, 0x3C, 0x18, 0x18, 0x00,
            0x60, 0x60, 0x7E, 0x63, 0x7E, 0x60, 0x60, 0x00, 0x3C, 0x66, 0x66, 0x6C, 0x66, 0x66, 0x6C, 0x60,
            0x30, 0x18, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00, 0x0C, 0x18, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00,
            0x18, 0x66, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00, 0x71, 0x8E, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00,
            0x66, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00, 0x18, 0x24, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00,
            0x00, 0x00, 0x7E, 0x1B, 0x7F, 0xD8, 0x77, 0x00, 0x00, 0x00, 0x3C, 0x60, 0x60, 0x60, 0x3C, 0x18,
            0x30, 0x18, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00, 0x0C, 0x18, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00,
            0x18, 0x66, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00, 0x66, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00,
            0x30, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x0C, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
            0x18, 0x66, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x66, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
            0x60, 0xFC, 0x18, 0x3C, 0x66, 0x66, 0x3C, 0x00, 0x71, 0x8E, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x00,
            0x30, 0x18, 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x00, 0x0C, 0x18, 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x00,
            0x18, 0x66, 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x00, 0x71, 0x8E, 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x00,
            0x00, 0x66, 0x00, 0x3C, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x18, 0x00, 0x7E, 0x00, 0x18, 0x00, 0x00,
            0x00, 0x02, 0x7C, 0xCE, 0xD6, 0xE6, 0x7C, 0x80, 0x30, 0x18, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x00,
            0x0C, 0x18, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x00, 0x18, 0x66, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x00,
            0x00, 0x66, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x00, 0x0C, 0x18, 0x00, 0x66, 0x66, 0x3C, 0x18, 0x30,
            0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x00, 0x66, 0x00, 0x66, 0x66, 0x3C, 0x18, 0x30
        };

        private static readonly byte[] _fontRussian = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
            0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
            0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x38, 0x7c, 0x38, 0xfe, 0xfe, 0xd6, 0x10, 0x38,
            0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x10, 0x38, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
            0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
            0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
            0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
            0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0, 0x18, 0xdb, 0x3c, 0xe7, 0xe7, 0x3c, 0xdb, 0x18,
            0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00, 0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
            0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
            0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00, 0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
            0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
            0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
            0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
            0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
            0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x38, 0x38, 0x38, 0x00, 0x38, 0x00,
            0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
            0x18, 0x3e, 0x60, 0x3c, 0x06, 0x7c, 0x18, 0x00, 0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
            0x70, 0xd8, 0xd8, 0x70, 0xdb, 0xce, 0x7b, 0x00, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0c, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00,
            0x18, 0xdb, 0x3c, 0xff, 0x3c, 0xdb, 0x18, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x1c, 0x38, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x00,
            0x7c, 0xc6, 0xce, 0xd6, 0xe6, 0xc6, 0x7c, 0x00, 0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
            0x7c, 0xc6, 0x06, 0x1c, 0x70, 0xc0, 0xfe, 0x00, 0x7c, 0xc6, 0x06, 0x3c, 0x06, 0xc6, 0x7c, 0x00,
            0x0e, 0x1e, 0x36, 0x66, 0xff, 0x06, 0x06, 0x00, 0xfe, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00,
            0x3c, 0x60, 0xc0, 0xfc, 0xc6, 0xc6, 0x7c, 0x00, 0xfe, 0xc6, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
            0x7c, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0x7c, 0x00, 0x7c, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
            0x00, 0x00, 0x38, 0x38, 0x00, 0x38, 0x38, 0x00, 0x00, 0x00, 0x38, 0x38, 0x00, 0x38, 0x38, 0x70,
            0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x00, 0x00,
            0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0x06, 0x1c, 0x30, 0x00, 0x30, 0x00,
            0x3e, 0x63, 0xcb, 0xd7, 0xce, 0x60, 0x3e, 0x00, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00,
            0xfc, 0xc6, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00,
            0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xfc, 0x00, 0xfe, 0xc0, 0xc0, 0xf8, 0xc0, 0xc0, 0xfe, 0x00,
            0xfe, 0xc0, 0xc0, 0xf8, 0xc0, 0xc0, 0xc0, 0x00, 0x7c, 0xc6, 0xc0, 0xde, 0xc6, 0xc6, 0x7c, 0x00,
            0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
            0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x3c, 0x00, 0xc6, 0xcc, 0xd8, 0xf0, 0xd8, 0xcc, 0xc6, 0x00,
            0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0xc3, 0xe7, 0xff, 0xdb, 0xdb, 0xc3, 0xc3, 0x00,
            0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
            0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0xc0, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xda, 0xcc, 0x76, 0x00,
            0xfc, 0xc6, 0xc6, 0xfc, 0xd8, 0xcc, 0xc6, 0x00, 0x7c, 0xc6, 0xc0, 0x7c, 0x06, 0xc6, 0x7c, 0x00,
            0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
            0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x38, 0x38, 0x00, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0xe7, 0xc3, 0x00,
            0xc6, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x00,
            0xfe, 0x06, 0x0c, 0x38, 0x60, 0xc0, 0xfe, 0x00, 0x3e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3e, 0x00,
            0x00, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x7c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x7c, 0x00,
            0x18, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
            0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x06, 0x7e, 0xc6, 0x7e, 0x00,
            0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x3e, 0x60, 0x60, 0x60, 0x3e, 0x00,
            0x06, 0x06, 0x7e, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0x7e, 0x00,
            0x1c, 0x36, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x7e, 0x06, 0x7c,
            0xc0, 0xc0, 0xdc, 0xe6, 0xc6, 0xc6, 0xc6, 0x00, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
            0x06, 0x00, 0x06, 0x06, 0x06, 0x06, 0x66, 0x3c, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0x00,
            0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x66, 0xdb, 0xdb, 0xdb, 0xdb, 0x00,
            0x00, 0x00, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
            0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x7e, 0x06, 0x06,
            0x00, 0x00, 0xdc, 0xe6, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x7e, 0xc0, 0x7c, 0x06, 0xfc, 0x00,
            0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
            0x00, 0x00, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xdb, 0xdb, 0x66, 0x00,
            0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xce, 0x76, 0x06, 0x7c,
            0x00, 0x00, 0xfe, 0x0c, 0x38, 0x60, 0xfe, 0x00, 0x0e, 0x18, 0x18, 0x70, 0x18, 0x18, 0x0e, 0x00,
            0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x1e, 0x18, 0x18, 0x70, 0x00,
            0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xee, 0xc6, 0xfe, 0xfe, 0x00,
            0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0xfc, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xfc, 0x00,
            0xfc, 0xc6, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
            0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xfc, 0x00, 0xfe, 0xc0, 0xc0, 0xf8, 0xc0, 0xc0, 0xfe, 0x00,
            0xd6, 0xd6, 0xd6, 0x7c, 0xd6, 0xd6, 0xd6, 0x00, 0x7c, 0xc6, 0x06, 0x1c, 0x06, 0xc6, 0x7c, 0x00,
            0xc6, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0x00, 0xd6, 0xd6, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x00,
            0xc6, 0xcc, 0xd8, 0xf0, 0xd8, 0xcc, 0xc6, 0x00, 0x3c, 0x66, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00,
            0xc3, 0xe7, 0xff, 0xdb, 0xdb, 0xc3, 0xc3, 0x00, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00,
            0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00,
            0xfc, 0xc6, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00,
            0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x7c, 0x00,
            0x10, 0x7c, 0xd6, 0xd6, 0xd6, 0x7c, 0x10, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0xc6, 0x00,
            0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xff, 0x00, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x00,
            0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xfe, 0x00, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xd6, 0xff, 0x01,
            0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0x7c, 0x00, 0xc6, 0xc6, 0xc6, 0xf6, 0xde, 0xde, 0xf6, 0x00,
            0xc0, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xfc, 0x00, 0x7c, 0xc6, 0x06, 0x3e, 0x06, 0xc6, 0x7c, 0x00,
            0xcc, 0xd6, 0xd6, 0xf6, 0xd6, 0xd6, 0xcc, 0x00, 0x7e, 0xc6, 0xc6, 0x7e, 0x36, 0x66, 0xc6, 0x00,
            0x00, 0x00, 0x7c, 0x06, 0x7e, 0xc6, 0x7e, 0x00, 0x3e, 0x60, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x00,
            0x00, 0x00, 0x7c, 0x66, 0x7c, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x7e, 0x60, 0x60, 0x60, 0x60, 0x00,
            0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0xff, 0x81, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0x7e, 0x00,
            0x00, 0x00, 0xd6, 0xd6, 0x7c, 0xd6, 0xd6, 0x00, 0x00, 0x00, 0x3c, 0x46, 0x1c, 0x46, 0x3c, 0x00,
            0x00, 0x00, 0x66, 0x66, 0x6e, 0x76, 0x66, 0x00, 0x00, 0x18, 0x66, 0x66, 0x6e, 0x76, 0x66, 0x00,
            0x00, 0x00, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0xc6, 0x00,
            0x00, 0x00, 0xe7, 0xdb, 0xdb, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x00,
            0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x7e, 0x66, 0x66, 0x66, 0x66, 0x00,
            0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
            0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
            0x66, 0x66, 0x66, 0x66, 0xe6, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x66, 0x66, 0x66,
            0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x66, 0x66, 0xe6, 0x06, 0xe6, 0x66, 0x66, 0x66,
            0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0xfe, 0x06, 0xe6, 0x66, 0x66, 0x66,
            0x66, 0x66, 0xe6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0xfe, 0x00, 0x00, 0x00,
            0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
            0x18, 0x18, 0x1e, 0x18, 0x1e, 0x18, 0x18, 0x18, 0x66, 0x66, 0x66, 0x66, 0x67, 0x66, 0x66, 0x66,
            0x66, 0x66, 0x67, 0x60, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x60, 0x67, 0x66, 0x66, 0x66,
            0x66, 0x66, 0xe7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xe7, 0x66, 0x66, 0x66,
            0x66, 0x66, 0x67, 0x60, 0x67, 0x66, 0x66, 0x66, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
            0x66, 0x66, 0xe7, 0x00, 0xe7, 0x66, 0x66, 0x66, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
            0x66, 0x66, 0x66, 0x66, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x00, 0xff, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7f, 0x00, 0x00, 0x00,
            0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x00, 0x7f, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xff, 0x66, 0x66, 0x66,
            0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
            0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x00, 0x00, 0x3e, 0x60, 0x60, 0x60, 0x3e, 0x00,
            0x00, 0x00, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x3e, 0x06, 0x7c,
            0x00, 0x00, 0x7c, 0xd6, 0xd6, 0xd6, 0x7c, 0x10, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
            0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7f, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3e, 0x06, 0x06, 0x00,
            0x00, 0x00, 0xd6, 0xd6, 0xd6, 0xd6, 0xfe, 0x00, 0x00, 0x00, 0xd6, 0xd6, 0xd6, 0xd6, 0xff, 0x01,
            0x00, 0x00, 0x70, 0x30, 0x3c, 0x36, 0x3c, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xf6, 0xde, 0xf6, 0x00,
            0x00, 0x00, 0x60, 0x60, 0x7c, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x7c, 0x06, 0x7e, 0x06, 0x7c, 0x00,
            0x00, 0x00, 0xcc, 0xd6, 0xf6, 0xd6, 0xcc, 0x00, 0x00, 0x00, 0x3e, 0x66, 0x3e, 0x36, 0x66, 0x00,
            0x48, 0xfc, 0xc0, 0xf8, 0xc0, 0xc0, 0xfc, 0x00, 0x28, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0x7e, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x60, 0x30, 0x18,
            0x18, 0x30, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x04, 0x02, 0xff, 0x02, 0x04, 0x00, 0x00, 0x00, 0x20, 0x40, 0xff, 0x40, 0x20, 0x00,
            0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
            0x00, 0x18, 0x00, 0xff, 0x00, 0x18, 0x00, 0x00, 0x10, 0x10, 0x7c, 0x10, 0x10, 0x00, 0x7c, 0x00,
            0x00, 0x8e, 0x88, 0xc9, 0xa9, 0x98, 0x88, 0x00, 0x00, 0x00, 0x42, 0x3c, 0x42, 0x3c, 0x42, 0x00,
            0x00, 0x00, 0x1c, 0x1c, 0x1c, 0x1c, 0x00, 0x00, 0x51, 0x8a, 0x51, 0x8a, 0x51, 0x8a, 0x51, 0x9a
        };

    }
}

